{
  "version": 3,
  "sources": ["../../src/helpers/createSolarFlowLocalStates.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\n\r\nimport { ZendureSolarflow } from \"../main\";\r\nimport { ISolarflowState } from \"../models/ISolarflowState\";\r\nimport { createCalculationStates } from \"./createCalculationStates\";\r\nimport { createControlStates } from \"./createControlStates\";\r\nimport { getStateDefinition } from \"./createSolarFlowStates\";\r\nimport { getProductNameFromProductKey } from \"./helpers\";\r\n//import { deleteCalculationStates } from \"./deleteCalculationStates\";\r\n\r\nexport const createSolarFlowLocalStates = async (\r\n  adapter: ZendureSolarflow,\r\n  productKey: string,\r\n  deviceKey: string\r\n): Promise<void> => {\r\n  productKey = productKey.replace(adapter.FORBIDDEN_CHARS, \"\");\r\n  deviceKey = deviceKey.replace(adapter.FORBIDDEN_CHARS, \"\");\r\n\r\n  const productName = getProductNameFromProductKey(productKey);\r\n\r\n  if (productName == \"\") {\r\n    adapter.log.error(\r\n      `[createSolarFlowLocalStates] Unknown product (${productKey}/${deviceKey}). We cannot create control states! Please contact the developer!`\r\n    );\r\n    return;\r\n  }\r\n\r\n  adapter.log.debug(\r\n    `[createSolarFlowLocalStates] Creating or updating SolarFlow states for ${productName} (${productKey}/${deviceKey}).`\r\n  );\r\n\r\n  // Create device (e.g. the product type -> SolarFlow)\r\n  await adapter?.extendObject(productKey, {\r\n    type: \"device\",\r\n    common: {\r\n      name: {\r\n        de: `${productName} (${productKey})`,\r\n        en: `${productName} (${productKey})`,\r\n      },\r\n    },\r\n    native: {},\r\n  });\r\n\r\n  // Create channel (e.g. the device specific key)\r\n  await adapter?.extendObject(productKey + \".\" + deviceKey, {\r\n    type: \"channel\",\r\n    common: {\r\n      name: {\r\n        de: `Device Key ${deviceKey}`,\r\n        en: `Device Key ${deviceKey}`,\r\n      },\r\n    },\r\n    native: {},\r\n  });\r\n\r\n  // Create pack data folder\r\n  if (productName?.toLowerCase().includes(\"smart plug\")) {\r\n    await adapter?.extendObject(`${productKey}.${deviceKey}.packData`, {\r\n      type: \"channel\",\r\n      common: {\r\n        name: {\r\n          de: \"Batterie Packs\",\r\n          en: \"Battery packs\",\r\n        },\r\n      },\r\n      native: {},\r\n    });\r\n  }\r\n\r\n  const states = getStateDefinition(productName);\r\n\r\n  states.forEach(async (state: ISolarflowState) => {\r\n    await adapter?.extendObject(`${productKey}.${deviceKey}.${state.title}`, {\r\n      type: \"state\",\r\n      common: {\r\n        name: {\r\n          de: state.nameDe,\r\n          en: state.nameEn,\r\n        },\r\n        type: state.type,\r\n        desc: state.title,\r\n        role: state.role,\r\n        read: true,\r\n        write: false,\r\n        unit: state.unit,\r\n        states: state.states,\r\n      },\r\n      native: {},\r\n    });\r\n  });\r\n\r\n  // Create control states\r\n  await createControlStates(adapter, productKey, deviceKey, productName);\r\n\r\n  if (adapter.config.useCalculation) {\r\n    // Create calculations folder\r\n    await adapter?.extendObject(`${productKey}.${deviceKey}.calculations`, {\r\n      type: \"channel\",\r\n      common: {\r\n        name: {\r\n          de: \"Berechnungen f\u00FCr Ger\u00E4t \" + deviceKey,\r\n          en: \"Calculations for Device \" + deviceKey,\r\n        },\r\n      },\r\n      native: {},\r\n    });\r\n\r\n    await createCalculationStates(adapter, productKey, deviceKey);\r\n  } else {\r\n    //await deleteCalculationStates(adapter, productKey, deviceKey);\r\n  }\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,qCAAwC;AACxC,iCAAoC;AACpC,mCAAmC;AACnC,qBAA6C;AAGtC,MAAM,6BAA6B,OACxC,SACA,YACA,cACkB;AAClB,eAAa,WAAW,QAAQ,QAAQ,iBAAiB,EAAE;AAC3D,cAAY,UAAU,QAAQ,QAAQ,iBAAiB,EAAE;AAEzD,QAAM,kBAAc,6CAA6B,UAAU;AAE3D,MAAI,eAAe,IAAI;AACrB,YAAQ,IAAI;AAAA,MACV,iDAAiD,UAAU,IAAI,SAAS;AAAA,IAC1E;AACA;AAAA,EACF;AAEA,UAAQ,IAAI;AAAA,IACV,0EAA0E,WAAW,KAAK,UAAU,IAAI,SAAS;AAAA,EACnH;AAGA,SAAM,mCAAS,aAAa,YAAY;AAAA,IACtC,MAAM;AAAA,IACN,QAAQ;AAAA,MACN,MAAM;AAAA,QACJ,IAAI,GAAG,WAAW,KAAK,UAAU;AAAA,QACjC,IAAI,GAAG,WAAW,KAAK,UAAU;AAAA,MACnC;AAAA,IACF;AAAA,IACA,QAAQ,CAAC;AAAA,EACX;AAGA,SAAM,mCAAS,aAAa,aAAa,MAAM,WAAW;AAAA,IACxD,MAAM;AAAA,IACN,QAAQ;AAAA,MACN,MAAM;AAAA,QACJ,IAAI,cAAc,SAAS;AAAA,QAC3B,IAAI,cAAc,SAAS;AAAA,MAC7B;AAAA,IACF;AAAA,IACA,QAAQ,CAAC;AAAA,EACX;AAGA,MAAI,2CAAa,cAAc,SAAS,eAAe;AACrD,WAAM,mCAAS,aAAa,GAAG,UAAU,IAAI,SAAS,aAAa;AAAA,MACjE,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,QACN;AAAA,MACF;AAAA,MACA,QAAQ,CAAC;AAAA,IACX;AAAA,EACF;AAEA,QAAM,aAAS,iDAAmB,WAAW;AAE7C,SAAO,QAAQ,OAAO,UAA2B;AAC/C,WAAM,mCAAS,aAAa,GAAG,UAAU,IAAI,SAAS,IAAI,MAAM,KAAK,IAAI;AAAA,MACvE,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,UACJ,IAAI,MAAM;AAAA,UACV,IAAI,MAAM;AAAA,QACZ;AAAA,QACA,MAAM,MAAM;AAAA,QACZ,MAAM,MAAM;AAAA,QACZ,MAAM,MAAM;AAAA,QACZ,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM,MAAM;AAAA,QACZ,QAAQ,MAAM;AAAA,MAChB;AAAA,MACA,QAAQ,CAAC;AAAA,IACX;AAAA,EACF,CAAC;AAGD,YAAM,gDAAoB,SAAS,YAAY,WAAW,WAAW;AAErE,MAAI,QAAQ,OAAO,gBAAgB;AAEjC,WAAM,mCAAS,aAAa,GAAG,UAAU,IAAI,SAAS,iBAAiB;AAAA,MACrE,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,UACJ,IAAI,kCAA4B;AAAA,UAChC,IAAI,6BAA6B;AAAA,QACnC;AAAA,MACF;AAAA,MACA,QAAQ,CAAC;AAAA,IACX;AAEA,cAAM,wDAAwB,SAAS,YAAY,SAAS;AAAA,EAC9D,OAAO;AAAA,EAEP;AACF;",
  "names": []
}
