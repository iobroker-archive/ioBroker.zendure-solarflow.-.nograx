{
  "version": 3,
  "sources": ["../../src/services/jobSchedule.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\nimport { scheduleJob } from \"node-schedule\";\r\nimport { ZendureSolarflow } from \"../main\";\r\n\r\nexport const startRefreshAccessTokenTimerJob = async (\r\n  adapter: ZendureSolarflow\r\n): Promise<void> => {\r\n  // Restart adapter every 3 hours\r\n  adapter.refreshAccessTokenInterval = adapter.setInterval(\r\n    async () => {\r\n      adapter.log.info(\r\n        `Refresh Access Token - Adapter will restart in 20 seconds!`\r\n      );\r\n\r\n      await adapter.delay(20 * 1000);\r\n      adapter.restart();\r\n    },\r\n    3 * 60 * 60 * 1000\r\n  );\r\n};\r\n\r\nexport const startResetValuesJob = async (\r\n  adapter: ZendureSolarflow\r\n): Promise<void> => {\r\n  adapter.resetValuesJob = scheduleJob(\"5 0 0 * * *\", () => {\r\n    // Reset Values\r\n    adapter.zenHaDeviceList.forEach((device) => {\r\n      device.resetValuesForDevice();\r\n    });\r\n  });\r\n};\r\n\r\nexport const startCalculationJob = async (\r\n  adapter: ZendureSolarflow\r\n): Promise<void> => {\r\n  adapter.calculationJob = scheduleJob(\"*/30 * * * * *\", () => {\r\n    adapter.zenHaDeviceList.forEach((device) => {\r\n      if (device.productKey != \"s3Xk4x\") {\r\n        device.calculateEnergy();\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexport const startCheckStatesAndConnectionJob = async (\r\n  adapter: ZendureSolarflow\r\n): Promise<void> => {\r\n  // Check for states that has no updates in the last 5 minutes and set them to 0\r\n  const statesToReset: string[] = [\r\n    \"outputHomePower\",\r\n    \"outputPackPower\",\r\n    \"gridInputPower\",\r\n    \"packInputPower\",\r\n    \"solarInputPower\",\r\n    \"packPower\",\r\n  ];\r\n\r\n  let refreshAccessTokenNeeded = false;\r\n\r\n  adapter.log.debug(\r\n    `[checkStatesJob] Starting check of states and connection!`\r\n  );\r\n\r\n  adapter.checkStatesJob = scheduleJob(\"*/5 * * * *\", async () => {\r\n    adapter.zenHaDeviceList.forEach(async (device) => {\r\n      if (refreshAccessTokenNeeded) {\r\n        return;\r\n      }\r\n\r\n      const lastUpdate = await adapter?.getStateAsync(\r\n        device.productKey + \".\" + device.deviceKey + \".lastUpdate\"\r\n      );\r\n\r\n      const wifiState = await adapter?.getStateAsync(\r\n        device.productKey + \".\" + device.deviceKey + \".wifiState\"\r\n      );\r\n\r\n      const fiveMinutesAgo = (Date.now() / 1000 - 5 * 60) * 1000; // Five minutes ago\r\n      const tenMinutesAgo = (Date.now() / 1000 - 10 * 60) * 1000; // Thirty minutes ago\r\n\r\n      if (\r\n        lastUpdate &&\r\n        lastUpdate.val &&\r\n        Number(lastUpdate.val) < tenMinutesAgo &&\r\n        wifiState?.val == \"Connected\" &&\r\n        adapter.config.connectionMode == \"authKey\"\r\n      ) {\r\n        adapter.log.warn(\r\n          `[checkStatesJob] Last update for deviceKey ${\r\n            device.deviceKey\r\n          } was at ${new Date(\r\n            Number(lastUpdate.val)\r\n          )}, device seems to be online - so maybe connection is broken - restart adapter in 20 seconds!`\r\n        );\r\n\r\n        await adapter.delay(20 * 1000);\r\n        adapter.restart();\r\n\r\n        // set marker, so we discontinue the forEach Loop because of reconnect!\r\n        refreshAccessTokenNeeded = true;\r\n      } else if (\r\n        lastUpdate &&\r\n        lastUpdate.val &&\r\n        Number(lastUpdate.val) < tenMinutesAgo &&\r\n        wifiState?.val == \"Connected\" &&\r\n        adapter.config.connectionMode == \"local\"\r\n      ) {\r\n        adapter.log.warn(\r\n          `[checkStatesJob] Last update for deviceKey ${\r\n            device.deviceKey\r\n          } was at ${new Date(\r\n            Number(lastUpdate.val)\r\n          )}, set Wifi state to Disconnected!`\r\n        );\r\n\r\n        device?.updateSolarFlowState(\"wifiState\", \"Disconnected\");\r\n      }\r\n\r\n      if (\r\n        lastUpdate &&\r\n        lastUpdate.val &&\r\n        Number(lastUpdate.val) < fiveMinutesAgo &&\r\n        !refreshAccessTokenNeeded\r\n      ) {\r\n        adapter.log.debug(\r\n          `[checkStatesJob] Last update for deviceKey ${\r\n            device.deviceKey\r\n          } was at ${new Date(\r\n            Number(lastUpdate.val)\r\n          )}, checking for pseudo power values!`\r\n        );\r\n        // State was not updated in the last 10 minutes... set states to 0\r\n        await statesToReset.forEach(async (stateName: string) => {\r\n          await adapter?.setState(\r\n            device.productKey + \".\" + device.deviceKey + \".\" + stateName,\r\n            0,\r\n            true\r\n          );\r\n        });\r\n      }\r\n    });\r\n  });\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,2BAA4B;AAGrB,MAAM,kCAAkC,OAC7C,YACkB;AAElB,UAAQ,6BAA6B,QAAQ;AAAA,IAC3C,YAAY;AACV,cAAQ,IAAI;AAAA,QACV;AAAA,MACF;AAEA,YAAM,QAAQ,MAAM,KAAK,GAAI;AAC7B,cAAQ,QAAQ;AAAA,IAClB;AAAA,IACA,IAAI,KAAK,KAAK;AAAA,EAChB;AACF;AAEO,MAAM,sBAAsB,OACjC,YACkB;AAClB,UAAQ,qBAAiB,kCAAY,eAAe,MAAM;AAExD,YAAQ,gBAAgB,QAAQ,CAAC,WAAW;AAC1C,aAAO,qBAAqB;AAAA,IAC9B,CAAC;AAAA,EACH,CAAC;AACH;AAEO,MAAM,sBAAsB,OACjC,YACkB;AAClB,UAAQ,qBAAiB,kCAAY,kBAAkB,MAAM;AAC3D,YAAQ,gBAAgB,QAAQ,CAAC,WAAW;AAC1C,UAAI,OAAO,cAAc,UAAU;AACjC,eAAO,gBAAgB;AAAA,MACzB;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH;AAEO,MAAM,mCAAmC,OAC9C,YACkB;AAElB,QAAM,gBAA0B;AAAA,IAC9B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,MAAI,2BAA2B;AAE/B,UAAQ,IAAI;AAAA,IACV;AAAA,EACF;AAEA,UAAQ,qBAAiB,kCAAY,eAAe,YAAY;AAC9D,YAAQ,gBAAgB,QAAQ,OAAO,WAAW;AAChD,UAAI,0BAA0B;AAC5B;AAAA,MACF;AAEA,YAAM,aAAa,OAAM,mCAAS;AAAA,QAChC,OAAO,aAAa,MAAM,OAAO,YAAY;AAAA;AAG/C,YAAM,YAAY,OAAM,mCAAS;AAAA,QAC/B,OAAO,aAAa,MAAM,OAAO,YAAY;AAAA;AAG/C,YAAM,kBAAkB,KAAK,IAAI,IAAI,MAAO,IAAI,MAAM;AACtD,YAAM,iBAAiB,KAAK,IAAI,IAAI,MAAO,KAAK,MAAM;AAEtD,UACE,cACA,WAAW,OACX,OAAO,WAAW,GAAG,IAAI,kBACzB,uCAAW,QAAO,eAClB,QAAQ,OAAO,kBAAkB,WACjC;AACA,gBAAQ,IAAI;AAAA,UACV,8CACE,OAAO,SACT,WAAW,IAAI;AAAA,YACb,OAAO,WAAW,GAAG;AAAA,UACvB,CAAC;AAAA,QACH;AAEA,cAAM,QAAQ,MAAM,KAAK,GAAI;AAC7B,gBAAQ,QAAQ;AAGhB,mCAA2B;AAAA,MAC7B,WACE,cACA,WAAW,OACX,OAAO,WAAW,GAAG,IAAI,kBACzB,uCAAW,QAAO,eAClB,QAAQ,OAAO,kBAAkB,SACjC;AACA,gBAAQ,IAAI;AAAA,UACV,8CACE,OAAO,SACT,WAAW,IAAI;AAAA,YACb,OAAO,WAAW,GAAG;AAAA,UACvB,CAAC;AAAA,QACH;AAEA,yCAAQ,qBAAqB,aAAa;AAAA,MAC5C;AAEA,UACE,cACA,WAAW,OACX,OAAO,WAAW,GAAG,IAAI,kBACzB,CAAC,0BACD;AACA,gBAAQ,IAAI;AAAA,UACV,8CACE,OAAO,SACT,WAAW,IAAI;AAAA,YACb,OAAO,WAAW,GAAG;AAAA,UACvB,CAAC;AAAA,QACH;AAEA,cAAM,cAAc,QAAQ,OAAO,cAAsB;AACvD,iBAAM,mCAAS;AAAA,YACb,OAAO,aAAa,MAAM,OAAO,YAAY,MAAM;AAAA,YACnD;AAAA,YACA;AAAA;AAAA,QAEJ,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH;",
  "names": []
}
