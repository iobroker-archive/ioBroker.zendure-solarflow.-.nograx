{
  "version": 3,
  "sources": ["../../src/services/zenWebService.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\nimport axios, { AxiosRequestConfig } from \"axios\";\r\nimport { haKey } from \"../constants/constants\";\r\nimport { ZendureSolarflow } from \"../main\";\r\nimport * as crypto from \"crypto\";\r\nimport { IHaDeviceListData } from \"../models/IHaDeviceListData\";\r\n\r\nexport const zenLogin = async (\r\n  adapter: ZendureSolarflow\r\n): Promise<string | IHaDeviceListData | undefined> => {\r\n  const decodedAuthCloudKey = Buffer.from(\r\n    adapter.config.authorizationCloudKey,\r\n    \"base64\"\r\n  ).toString(\"utf-8\");\r\n\r\n  console.log(\"Decoded Key:\" + decodedAuthCloudKey);\r\n\r\n  const lastDot = decodedAuthCloudKey.lastIndexOf(\".\");\r\n  if (lastDot === -1) {\r\n    // Invalid\r\n  }\r\n\r\n  const apiUrl = decodedAuthCloudKey.slice(0, lastDot);\r\n  const appKey = decodedAuthCloudKey.slice(lastDot + 1);\r\n\r\n  const body = {\r\n    appKey: appKey,\r\n  };\r\n\r\n  // Timestamp und Nonce\r\n  const timestamp = Math.floor(Date.now() / 1000);\r\n  const nonce = (Math.floor(Math.random() * 90000) + 10000).toString();\r\n\r\n  // Signatur-Parameter\r\n  const signParams: Record<string, string | number> = {\r\n    ...body,\r\n    timestamp: timestamp,\r\n    nonce: nonce,\r\n  };\r\n\r\n  // Signatur-String erstellen\r\n  const bodyStr = Object.keys(signParams)\r\n    .sort()\r\n    .map((k) => `${k}${signParams[k]}`)\r\n    .join(\"\");\r\n\r\n  const signStr = `${haKey}${bodyStr}${haKey}`;\r\n\r\n  // SHA1-Hash berechnen\r\n  const sha1 = crypto.createHash(\"sha1\");\r\n  sha1.update(signStr, \"utf8\");\r\n  const sign = sha1.digest(\"hex\").toUpperCase();\r\n\r\n  // Header bauen\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    timestamp: timestamp.toString(),\r\n    nonce: nonce,\r\n    clientid: \"zenHa\",\r\n    sign: sign,\r\n  };\r\n\r\n  const config: AxiosRequestConfig = {\r\n    headers: headers,\r\n    timeout: 10000,\r\n  };\r\n\r\n  // Request\r\n  return axios\r\n    .post(`${apiUrl}/api/ha/deviceList`, JSON.stringify(body), config)\r\n    .then(async function (response) {\r\n      const data = await response.data;\r\n\r\n      console.log(data);\r\n\r\n      return data.data;\r\n    });\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAA0C;AAC1C,uBAAsB;AAEtB,aAAwB;AAGjB,MAAM,WAAW,OACtB,YACoD;AACpD,QAAM,sBAAsB,OAAO;AAAA,IACjC,QAAQ,OAAO;AAAA,IACf;AAAA,EACF,EAAE,SAAS,OAAO;AAElB,UAAQ,IAAI,iBAAiB,mBAAmB;AAEhD,QAAM,UAAU,oBAAoB,YAAY,GAAG;AACnD,MAAI,YAAY,IAAI;AAAA,EAEpB;AAEA,QAAM,SAAS,oBAAoB,MAAM,GAAG,OAAO;AACnD,QAAM,SAAS,oBAAoB,MAAM,UAAU,CAAC;AAEpD,QAAM,OAAO;AAAA,IACX;AAAA,EACF;AAGA,QAAM,YAAY,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI;AAC9C,QAAM,SAAS,KAAK,MAAM,KAAK,OAAO,IAAI,GAAK,IAAI,KAAO,SAAS;AAGnE,QAAM,aAA8C;AAAA,IAClD,GAAG;AAAA,IACH;AAAA,IACA;AAAA,EACF;AAGA,QAAM,UAAU,OAAO,KAAK,UAAU,EACnC,KAAK,EACL,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC,EAAE,EACjC,KAAK,EAAE;AAEV,QAAM,UAAU,GAAG,sBAAK,GAAG,OAAO,GAAG,sBAAK;AAG1C,QAAM,OAAO,OAAO,WAAW,MAAM;AACrC,OAAK,OAAO,SAAS,MAAM;AAC3B,QAAM,OAAO,KAAK,OAAO,KAAK,EAAE,YAAY;AAG5C,QAAM,UAAU;AAAA,IACd,gBAAgB;AAAA,IAChB,WAAW,UAAU,SAAS;AAAA,IAC9B;AAAA,IACA,UAAU;AAAA,IACV;AAAA,EACF;AAEA,QAAM,SAA6B;AAAA,IACjC;AAAA,IACA,SAAS;AAAA,EACX;AAGA,SAAO,aAAAA,QACJ,KAAK,GAAG,MAAM,sBAAsB,KAAK,UAAU,IAAI,GAAG,MAAM,EAChE,KAAK,eAAgB,UAAU;AAC9B,UAAM,OAAO,MAAM,SAAS;AAE5B,YAAQ,IAAI,IAAI;AAEhB,WAAO,KAAK;AAAA,EACd,CAAC;AACL;",
  "names": ["axios"]
}
