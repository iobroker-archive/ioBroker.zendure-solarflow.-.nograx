{
  "version": 3,
  "sources": ["../../../src/models/deviceModels/Sf800Pro.ts"],
  "sourcesContent": ["import { solarflow800ProControlStates } from \"../../constants/solarflow800ProControlStates\";\r\nimport { solarflow800ProStates } from \"../../constants/solarflow800ProStates\";\r\nimport { ZendureSolarflow } from \"../../main\";\r\nimport { IHemsEpPayload } from \"../IDeviceAutomationPayload\";\r\nimport { IZenHaDeviceDetails } from \"../IZenHaDeviceDetails\";\r\nimport { ZenHaDevice } from \"./ZenHaDevice\";\r\n\r\nexport class Sf800 extends ZenHaDevice {\r\n  maxInputLimit = 800;\r\n  maxOutputLimit = 800;\r\n\r\n  states = solarflow800ProStates;\r\n  controlStates = solarflow800ProControlStates;\r\n\r\n  public constructor(\r\n    _adapter: ZendureSolarflow,\r\n    _productKey: string,\r\n    _deviceKey: string,\r\n    _productName: string,\r\n    _deviceName: string,\r\n    _zenHaDeviceDetails?: IZenHaDeviceDetails\r\n  ) {\r\n    super(\r\n      _adapter,\r\n      _productKey,\r\n      _deviceKey,\r\n      _productName,\r\n      _deviceName,\r\n      _zenHaDeviceDetails\r\n    );\r\n  }\r\n\r\n  public async setAcMode(acMode: number): Promise<void> {\r\n    if (this.adapter.mqttClient && this.productKey && this.deviceKey) {\r\n      if (acMode >= 0 && acMode <= 3) {\r\n        const topic = `iot/${this.productKey}/${this.deviceKey}/properties/write`;\r\n\r\n        const setAcMode = { properties: { acMode: acMode } };\r\n        this.adapter.log.debug(`[setAcMode] Set AC mode to ${acMode}!`);\r\n        this.adapter.mqttClient?.publish(topic, JSON.stringify(setAcMode));\r\n\r\n        // Check if device is HUB, then check if smartMode is false - if so send a warning to log!\r\n        const smartMode = await this.adapter.getStateAsync(\r\n          this.productKey + \".\" + this.deviceKey + \".control.smartMode\"\r\n        );\r\n\r\n        if (smartMode && !smartMode.val) {\r\n          this.adapter.log.warn(\r\n            `[setAcMode] AC mode was switched and smartMode is false - changes will be written to flash memory. In the worst case, the device may break or changes may no longer be saved!`\r\n          );\r\n        }\r\n      } else {\r\n        this.adapter.log.error(\r\n          `[setAcMode] AC mode must be a value between 0 and 3!`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public setAcSwitch(acSwitch: boolean): void {\r\n    if (this.adapter.mqttClient && this.productKey && this.deviceKey) {\r\n      const setAcSwitchContent = {\r\n        properties: { acSwitch: acSwitch ? 1 : 0 },\r\n      };\r\n      this.adapter.log.debug(\r\n        `[setAcSwitch] Set AC Switch for device ${this.deviceKey} to ${acSwitch}!`\r\n      );\r\n      this.adapter.mqttClient?.publish(\r\n        this.iotTopic,\r\n        JSON.stringify(setAcSwitchContent)\r\n      );\r\n    }\r\n  }\r\n\r\n  public async setDeviceAutomationInOutLimit(\r\n    limit: number // can be negative, negative will trigger charging mode\r\n  ): Promise<void> {\r\n    if (this.adapter.mqttClient && this.productKey && this.deviceKey) {\r\n      this.adapter.log.debug(\r\n        `[setDeviceAutomationInOutLimit] Set device Automation limit to ${limit}!`\r\n      );\r\n\r\n      if (limit) {\r\n        limit = Math.round(limit);\r\n      } else {\r\n        limit = 0;\r\n      }\r\n\r\n      if (this.adapter.config.useLowVoltageBlock) {\r\n        const lowVoltageBlockState = await this.adapter.getStateAsync(\r\n          this.productKey + \".\" + this.deviceKey + \".control.lowVoltageBlock\"\r\n        );\r\n        if (\r\n          lowVoltageBlockState &&\r\n          lowVoltageBlockState.val &&\r\n          lowVoltageBlockState.val == true &&\r\n          limit > 0\r\n        ) {\r\n          limit = 0;\r\n        }\r\n\r\n        const fullChargeNeeded = await this.adapter.getStateAsync(\r\n          this.productKey + \".\" + this.deviceKey + \".control.fullChargeNeeded\"\r\n        );\r\n\r\n        if (\r\n          fullChargeNeeded &&\r\n          fullChargeNeeded.val &&\r\n          fullChargeNeeded.val == true &&\r\n          limit > 0\r\n        ) {\r\n          limit = 0;\r\n        }\r\n      }\r\n\r\n      if (limit < 0) {\r\n        // Get input limit, make number positive and the new value negative\r\n        if (limit < this.maxInputLimit) {\r\n          limit = this.maxInputLimit;\r\n        }\r\n      } else {\r\n        if (limit > this.maxOutputLimit) {\r\n          limit = this.maxOutputLimit;\r\n        }\r\n      }\r\n\r\n      this.adapter.msgCounter += 1;\r\n\r\n      const timestamp = new Date();\r\n      timestamp.setMilliseconds(0);\r\n\r\n      // Device Automation for Solarflow 2400 AC and Solarflow 800\r\n      this.adapter.log.debug(\r\n        `[setDeviceAutomationInOutLimit] Using HEMS Variant of device automation, as deviceKey '${this.deviceKey}' detected!`\r\n      );\r\n\r\n      // HEMS Variante\r\n      const _arguments: IHemsEpPayload = {\r\n        outputPower: limit > 0 ? limit : 0,\r\n        chargeState: limit > 0 ? 0 : 1,\r\n        chargePower: limit > 0 ? 0 : -limit,\r\n        mode: 9,\r\n      };\r\n\r\n      const hemsEP = {\r\n        arguments: _arguments,\r\n        function: \"hemsEP\",\r\n        messageId: this.adapter.msgCounter,\r\n        deviceKey: this.deviceKey,\r\n        timestamp: timestamp.getTime() / 1000,\r\n      };\r\n      this.adapter.mqttClient?.publish(\r\n        this.functionTopic,\r\n        JSON.stringify(hemsEP)\r\n      );\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
