{
  "version": 3,
  "sources": ["../../../src/models/deviceModels/ZenHaDevice.ts"],
  "sourcesContent": ["import { calculationStateKeys } from \"../../constants/constants\";\r\nimport { createCalculationStates } from \"../../helpers/createCalculationStates\";\r\nimport { toHoursAndMinutes } from \"../../helpers/timeHelper\";\r\nimport { ZendureSolarflow } from \"../../main\";\r\nimport {\r\n  knownPackDataProperties,\r\n  onSubscribeIotTopic,\r\n  onSubscribeReportTopic,\r\n} from \"../../services/mqttSharedService\";\r\nimport { IDevicePack } from \"../IDevicePack\";\r\nimport { IPackData } from \"../IPackData\";\r\nimport { ISolarflowState } from \"../ISolarflowState\";\r\nimport { IZenHaDeviceDetails } from \"../IZenHaDeviceDetails\";\r\n\r\nexport class ZenHaDevice {\r\n  public zenHaDeviceDetails?: IZenHaDeviceDetails;\r\n  public adapter: ZendureSolarflow;\r\n\r\n  public productKey: string;\r\n  public deviceKey: string;\r\n  public productName: string;\r\n  public deviceName: string;\r\n  public batteries: IDevicePack[] = [];\r\n\r\n  public iotTopic: string = \"\";\r\n  public functionTopic = \"\";\r\n\r\n  public maxInputLimit: number = 0;\r\n  public maxOutputLimit: number = 0;\r\n\r\n  public states: ISolarflowState[] = [];\r\n  public controlStates: ISolarflowState[] = [];\r\n\r\n  public constructor(\r\n    _adapter: ZendureSolarflow,\r\n    _productKey: string,\r\n    _deviceKey: string,\r\n    _productName: string,\r\n    _deviceName: string,\r\n    _zenHaDeviceDetails?: IZenHaDeviceDetails\r\n  ) {\r\n    this.zenHaDeviceDetails = _zenHaDeviceDetails;\r\n    this.adapter = _adapter;\r\n    this.productKey = _productKey;\r\n    this.deviceKey = _deviceKey;\r\n\r\n    this.deviceName = _deviceName;\r\n    this.productName = _productName;\r\n\r\n    this.iotTopic = `iot/${_productKey}/${_deviceKey}/properties/write`;\r\n    this.functionTopic = `iot/${_productKey}/${_deviceKey}/function/invoke`;\r\n\r\n    // Create or update states\r\n    this.createSolarFlowStates();\r\n\r\n    // Subscribe to report topic (get telemetry)\r\n    this.subscribeReportTopic();\r\n\r\n    // Subscribe to Iot topic (push control values)\r\n    this.subscribeIotTopic();\r\n\r\n    // Get complete data from device after a timeout\r\n    this.adapter.setTimeout(() => {\r\n      this.triggerFullTelemetryUpdate();\r\n    }, 5000);\r\n\r\n    if (this.zenHaDeviceDetails?.online) {\r\n      this.updateSolarFlowState(\"wifiState\", \"Connected\");\r\n    } else if (this.zenHaDeviceDetails?.online == false) {\r\n      this.updateSolarFlowState(\"wifiState\", \"Disconnected\");\r\n    }\r\n  }\r\n\r\n  private async createSolarFlowStates(): Promise<void> {\r\n    const productKey = this.productKey.replace(\r\n      this.adapter.FORBIDDEN_CHARS,\r\n      \"\"\r\n    );\r\n    const deviceKey = this.deviceKey.replace(this.adapter.FORBIDDEN_CHARS, \"\");\r\n\r\n    this.adapter.log.debug(\r\n      `[createSolarFlowStates] Creating or updating SolarFlow states for ${this.productName} (${productKey}/${deviceKey}) and name '${this.deviceName}'.`\r\n    );\r\n\r\n    // Create device (e.g. the product type -> SolarFlow)\r\n    await this.adapter?.extendObject(productKey, {\r\n      type: \"device\",\r\n      common: {\r\n        name: {\r\n          de: `${this.productName} (${productKey})`,\r\n          en: `${this.productName} (${productKey})`,\r\n        },\r\n      },\r\n      native: {},\r\n    });\r\n\r\n    // Create channel (e.g. the device specific key)\r\n    await this.adapter?.extendObject(productKey + \".\" + deviceKey, {\r\n      type: \"channel\",\r\n      common: {\r\n        name: {\r\n          de: `${this.deviceName} (${deviceKey})`,\r\n          en: `${this.deviceName} (${deviceKey})`,\r\n        },\r\n      },\r\n      native: {},\r\n    });\r\n\r\n    // Create pack data folder\r\n    await this.adapter?.extendObject(`${productKey}.${deviceKey}.packData`, {\r\n      type: \"channel\",\r\n      common: {\r\n        name: {\r\n          de: \"Batterie Packs\",\r\n          en: \"Battery packs\",\r\n        },\r\n      },\r\n      native: {},\r\n    });\r\n\r\n    // Create report states\r\n    this.states.forEach(async (state: ISolarflowState) => {\r\n      await this.adapter?.extendObject(\r\n        `${productKey}.${deviceKey}.${state.title}`,\r\n        {\r\n          type: \"state\",\r\n          common: {\r\n            name: {\r\n              de: state.nameDe,\r\n              en: state.nameEn,\r\n            },\r\n            type: state.type,\r\n            desc: state.title,\r\n            role: state.role,\r\n            read: true,\r\n            write: false,\r\n            unit: state.unit,\r\n            states: state.states,\r\n          },\r\n          native: {},\r\n        }\r\n      );\r\n    });\r\n\r\n    // Create control folder\r\n    await this.adapter?.extendObject(`${productKey}.${deviceKey}.control`, {\r\n      type: \"channel\",\r\n      common: {\r\n        name: {\r\n          de: \"Steuerung f\u00FCr Ger\u00E4t \" + deviceKey,\r\n          en: \"Control for device \" + deviceKey,\r\n        },\r\n      },\r\n      native: {},\r\n    });\r\n\r\n    this.controlStates.forEach(async (state: ISolarflowState) => {\r\n      await this.adapter?.extendObject(\r\n        `${productKey}.${deviceKey}.control.${state.title}`,\r\n        {\r\n          type: \"state\",\r\n          common: {\r\n            name: {\r\n              de: state.nameDe,\r\n              en: state.nameEn,\r\n            },\r\n            type: state.type,\r\n            desc: state.title,\r\n            role: state.role,\r\n            read: true,\r\n            write: true,\r\n            unit: state.unit,\r\n            states: state.states,\r\n          },\r\n          native: {},\r\n        }\r\n      );\r\n\r\n      // Subscribe to states to respond to changes\r\n      this.adapter?.subscribeStates(\r\n        `${productKey}.${deviceKey}.control.${state.title}`\r\n      );\r\n    });\r\n\r\n    if (this.adapter.config.useCalculation) {\r\n      // Create calculations folder\r\n      await this.adapter?.extendObject(\r\n        `${productKey}.${deviceKey}.calculations`,\r\n        {\r\n          type: \"channel\",\r\n          common: {\r\n            name: {\r\n              de: \"Berechnungen f\u00FCr Ger\u00E4t \" + deviceKey,\r\n              en: \"Calculations for Device \" + deviceKey,\r\n            },\r\n          },\r\n          native: {},\r\n        }\r\n      );\r\n\r\n      await createCalculationStates(this.adapter, productKey, deviceKey);\r\n    }\r\n  }\r\n\r\n  public subscribeReportTopic(): void {\r\n    const reportTopic = `/${this.productKey}/${this.deviceKey}/#`;\r\n\r\n    if (this.adapter) {\r\n      this.adapter.log.debug(\r\n        `[subscribeReportTopic] Subscribing to MQTT Topic: ${reportTopic}`\r\n      );\r\n      this.adapter.mqttClient?.subscribe(reportTopic, onSubscribeReportTopic);\r\n    }\r\n  }\r\n\r\n  private subscribeIotTopic(): void {\r\n    const iotTopic = `iot/${this.productKey}/${this.deviceKey}/#`;\r\n\r\n    this.adapter?.log.debug(\r\n      `[subscribeIotTopic] Subscribing to MQTT Topic: ${iotTopic}`\r\n    );\r\n    this.adapter?.mqttClient?.subscribe(iotTopic, (error) => {\r\n      onSubscribeIotTopic(error, this.productKey, this.deviceKey);\r\n    });\r\n  }\r\n\r\n  public setDeviceAutomationInOutLimit(limit: number): void {\r\n    this.adapter?.log.error(\r\n      `[setAcMode] Method setDeviceAutomationInOutLimit (set to ${limit}) not defined in base class!`\r\n    );\r\n    return;\r\n  }\r\n\r\n  public setAcMode(acMode: number): void {\r\n    this.adapter?.log.error(\r\n      `[setAcMode] Method setAcMode (set to ${acMode}) not defined in base class!`\r\n    );\r\n    return;\r\n  }\r\n\r\n  public setDcSwitch(dcSwitch: boolean): void {\r\n    this.adapter?.log.error(\r\n      `[setAcMode] Method setDcSwitch (set to ${dcSwitch}) not defined in base class!`\r\n    );\r\n    return;\r\n  }\r\n\r\n  public setAcSwitch(acSwitch: boolean): void {\r\n    this.adapter?.log.error(\r\n      `[setAcMode] Method setAcSwitch (set to ${acSwitch}) not defined in base class!`\r\n    );\r\n    return;\r\n  }\r\n\r\n  public setHubState(hubState: number): void {\r\n    if (this.adapter.mqttClient && this.productKey && this.deviceKey) {\r\n      if (hubState == 0 || hubState == 1) {\r\n        const topic = `iot/${this.productKey}/${this.deviceKey}/properties/write`;\r\n\r\n        const socSetLimit = { properties: { hubState: hubState } };\r\n        this.adapter.log.debug(\r\n          `[setHubState] Setting Hub State for deviceKey ${this.deviceKey} to ${hubState}!`\r\n        );\r\n        this.adapter.mqttClient?.publish(topic, JSON.stringify(socSetLimit));\r\n      } else {\r\n        this.adapter.log.debug(`[setHubState] Hub state is not 0 or 1!`);\r\n      }\r\n    }\r\n  }\r\n\r\n  public setPassMode(passMode: number): void {\r\n    if (this.adapter.mqttClient && this.productKey && this.deviceKey) {\r\n      const topic = `iot/${this.productKey}/${this.deviceKey}/properties/write`;\r\n\r\n      const setPassModeContent = { properties: { passMode: passMode } };\r\n      this.adapter.log.debug(\r\n        `[setPassMode] Set passMode for deviceKey ${this.deviceKey} to ${passMode}!`\r\n      );\r\n      this.adapter.mqttClient?.publish(\r\n        topic,\r\n        JSON.stringify(setPassModeContent)\r\n      );\r\n    }\r\n  }\r\n\r\n  public setAutoRecover(autoRecover: boolean): void {\r\n    if (this.adapter.mqttClient && this.productKey && this.deviceKey) {\r\n      const topic = `iot/${this.productKey}/${this.deviceKey}/properties/write`;\r\n\r\n      const setAutoRecoverContent = {\r\n        properties: { autoRecover: autoRecover ? 1 : 0 },\r\n      };\r\n      this.adapter.log.debug(\r\n        `[setAutoRecover] Set autoRecover for deviceKey ${this.deviceKey} to ${autoRecover}!`\r\n      );\r\n      this.adapter.mqttClient?.publish(\r\n        topic,\r\n        JSON.stringify(setAutoRecoverContent)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will set the discharge limit (minSoc)\r\n   * @param socSet the desired minimum soc\r\n   * @returns void\r\n   */\r\n  public setDischargeLimit(minSoc: number): void {\r\n    if (this.adapter.mqttClient && this.productKey && this.deviceKey) {\r\n      if (minSoc >= 0 && minSoc <= 50) {\r\n        const topic = `iot/${this.productKey}/${this.deviceKey}/properties/write`;\r\n\r\n        const socSetLimit = { properties: { minSoc: minSoc * 10 } };\r\n        this.adapter.log.debug(\r\n          `[setDischargeLimit] Setting Discharge Limit for device key ${this.deviceKey} to ${minSoc}!`\r\n        );\r\n        this.adapter.mqttClient?.publish(topic, JSON.stringify(socSetLimit));\r\n      } else {\r\n        this.adapter.log.debug(\r\n          `[setDischargeLimit] Discharge limit is not in range 0<>50!`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will set the maximum charge limit\r\n   * @param socSet the desired max SOC\r\n   * @returns void\r\n   */\r\n  public setChargeLimit(socSet: number): void {\r\n    if (this.adapter.mqttClient && this.productKey && this.deviceKey) {\r\n      if (socSet >= 40 && socSet <= 100) {\r\n        const socSetLimit = { properties: { socSet: socSet * 10 } };\r\n        this.adapter.log.debug(\r\n          `[setChargeLimit] Setting ChargeLimit for device key ${this.deviceKey} to ${socSet}!`\r\n        );\r\n        this.adapter.mqttClient?.publish(\r\n          this.iotTopic,\r\n          JSON.stringify(socSetLimit)\r\n        );\r\n      } else {\r\n        this.adapter.log.debug(\r\n          `[setChargeLimit] Charge limit is not in range 40<>100!`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will set the 'energy plan'\r\n   * @param autoModel autoModel value, like 8 for smart matching\r\n   * @returns void\r\n   */\r\n  public setAutoModel(autoModel: number): void {\r\n    if (this.adapter.mqttClient && this.productKey && this.deviceKey) {\r\n      let setAutoModelContent: any = { properties: { autoModel: autoModel } };\r\n\r\n      switch (autoModel) {\r\n        case 8: {\r\n          // Smart Matching Modus\r\n          setAutoModelContent = {\r\n            properties: {\r\n              autoModelProgram: 1,\r\n              autoModelValue: {\r\n                chargingType: 0,\r\n                chargingPower: 0,\r\n                outPower: 0,\r\n              },\r\n              msgType: 1,\r\n              autoModel: 8,\r\n            },\r\n          };\r\n          break;\r\n        }\r\n        case 9: // Smart CT Modus\r\n          setAutoModelContent = {\r\n            properties: {\r\n              autoModelProgram: 2,\r\n              autoModelValue: {\r\n                chargingType: 3,\r\n                chargingPower: 0,\r\n                outPower: 0,\r\n              },\r\n              msgType: 1,\r\n              autoModel: 9,\r\n            },\r\n          };\r\n          break;\r\n      }\r\n\r\n      this.adapter.log.debug(\r\n        `[setAutoModel] Setting autoModel for device key ${this.deviceKey} to ${autoModel}!`\r\n      );\r\n      this.adapter.mqttClient?.publish(\r\n        this.iotTopic,\r\n        JSON.stringify(setAutoModelContent)\r\n      );\r\n    }\r\n  }\r\n\r\n  public async setOutputLimit(limit: number): Promise<void> {\r\n    if (this.adapter.mqttClient && this.productKey && this.deviceKey) {\r\n      // Check if autoModel is set to 0 (Nothing) or 8 (Smart Matching)\r\n      const autoModel = (\r\n        await this.adapter.getStateAsync(\r\n          this.productKey + \".\" + this.deviceKey + \".autoModel\"\r\n        )\r\n      )?.val;\r\n\r\n      if (autoModel != 0) {\r\n        this.adapter.log.warn(\r\n          \"Operation mode (autoModel) is not set to '0', we can't set the output limit!\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      if (limit) {\r\n        limit = Math.round(limit);\r\n      } else {\r\n        limit = 0;\r\n      }\r\n\r\n      // Limit to the device max limit\r\n      if (limit > this.maxOutputLimit) {\r\n        limit = this.maxOutputLimit;\r\n      }\r\n\r\n      if (\r\n        limit < 100 &&\r\n        limit != 90 &&\r\n        limit != 60 &&\r\n        limit != 30 &&\r\n        limit != 0 &&\r\n        (this.productKey == \"73bktv\" || this.productKey == \"a8yh63\")\r\n      ) {\r\n        // NUR Solarflow HUB: Das Limit kann unter 100 nur in 30er Schritten gesetzt werden, dH. 30/60/90/100, wir rechnen das also um\r\n        if (limit < 100 && limit > 90) {\r\n          limit = 90;\r\n        } else if (limit > 60 && limit < 90) {\r\n          limit = 60;\r\n        } else if (limit > 30 && limit < 60) {\r\n          limit = 30;\r\n        } else if (limit < 30) {\r\n          limit = 30;\r\n        }\r\n      }\r\n\r\n      if (this.adapter.config.useLowVoltageBlock) {\r\n        const lowVoltageBlockState = await this.adapter.getStateAsync(\r\n          this.productKey + \".\" + this.deviceKey + \".control.lowVoltageBlock\"\r\n        );\r\n        if (\r\n          lowVoltageBlockState &&\r\n          lowVoltageBlockState.val &&\r\n          lowVoltageBlockState.val == true\r\n        ) {\r\n          limit = 0;\r\n        }\r\n\r\n        const fullChargeNeeded = await this.adapter.getStateAsync(\r\n          this.productKey + \".\" + this.deviceKey + \".control.fullChargeNeeded\"\r\n        );\r\n\r\n        if (\r\n          fullChargeNeeded &&\r\n          fullChargeNeeded.val &&\r\n          fullChargeNeeded.val == true\r\n        ) {\r\n          limit = 0;\r\n        }\r\n      }\r\n\r\n      const currentLimit = (\r\n        await this.adapter.getStateAsync(\r\n          this.productKey + \".\" + this.deviceKey + \".outputLimit\"\r\n        )\r\n      )?.val;\r\n\r\n      if (currentLimit != null && currentLimit != undefined) {\r\n        if (currentLimit != limit) {\r\n          const outputlimit = { properties: { outputLimit: limit } };\r\n\r\n          this.adapter.msgCounter += 1;\r\n\r\n          const timestamp = new Date();\r\n          timestamp.setMilliseconds(0);\r\n\r\n          this.adapter.mqttClient?.publish(\r\n            this.iotTopic,\r\n            JSON.stringify(outputlimit)\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public setInputLimit(limit: number): void {\r\n    if (this.adapter.mqttClient && this.productKey && this.deviceKey) {\r\n      if (limit) {\r\n        limit = Math.round(limit);\r\n      } else {\r\n        limit = 0;\r\n      }\r\n\r\n      if (limit < 0) {\r\n        limit = 0;\r\n      } else if (limit > 0 && limit <= 30) {\r\n        limit = 30;\r\n      } else if (limit > -this.maxInputLimit) {\r\n        limit = -this.maxInputLimit;\r\n      }\r\n\r\n      if (this.productKey.includes(\"8bm93h\")) {\r\n        // Das Limit kann beim ACE nur in 100er Schritten gesetzt werden\r\n        limit = Math.ceil(limit / 100) * 100;\r\n      }\r\n\r\n      const inputLimitContent = { properties: { inputLimit: limit } };\r\n      this.adapter.mqttClient?.publish(\r\n        this.iotTopic,\r\n        JSON.stringify(inputLimitContent)\r\n      );\r\n    }\r\n  }\r\n\r\n  public setSmartMode(smartModeOn: boolean): void {\r\n    if (this.adapter.mqttClient && this.productKey && this.deviceKey) {\r\n      const setSmartModeContent = {\r\n        properties: { smartMode: smartModeOn ? 1 : 0 },\r\n      };\r\n\r\n      this.adapter.log.debug(\r\n        `[setBuzzer] Setting Smart Mode for device key ${this.deviceKey} to ${smartModeOn}!`\r\n      );\r\n      this.adapter.mqttClient?.publish(\r\n        this.iotTopic,\r\n        JSON.stringify(setSmartModeContent)\r\n      );\r\n    }\r\n  }\r\n\r\n  public setBuzzerSwitch(buzzerOn: boolean): void {\r\n    if (this.adapter.mqttClient && this.productKey && this.deviceKey) {\r\n      const setBuzzerSwitchContent = {\r\n        properties: { buzzerSwitch: buzzerOn ? 1 : 0 },\r\n      };\r\n      this.adapter.log.debug(\r\n        `[setBuzzer] Setting Buzzer for device key ${this.deviceKey} to ${buzzerOn}!`\r\n      );\r\n      this.adapter.mqttClient?.publish(\r\n        this.iotTopic,\r\n        JSON.stringify(setBuzzerSwitchContent)\r\n      );\r\n    }\r\n  }\r\n\r\n  public triggerFullTelemetryUpdate(): void {\r\n    if (this.adapter.mqttClient && this.productKey && this.deviceKey) {\r\n      const topic = `iot/${this.productKey}/${this.deviceKey}/properties/read`;\r\n\r\n      const getAllContent = { properties: [\"getAll\"] };\r\n      this.adapter.log.debug(\r\n        `[triggerFullTelemetryUpdate] Triggering full telemetry update for device key ${this.deviceKey}!`\r\n      );\r\n      this.adapter.mqttClient?.publish(topic, JSON.stringify(getAllContent));\r\n    }\r\n  }\r\n\r\n  public async updateSolarFlowState(\r\n    state: string,\r\n    val: number | string | boolean\r\n  ): Promise<void> {\r\n    const currentValue = await this.adapter.getStateAsync(\r\n      `${this.productKey}.${this.deviceKey}.${state}`\r\n    );\r\n\r\n    await this.adapter?.setState(\r\n      `${this.productKey}.${this.deviceKey}.${state}`,\r\n      val,\r\n      true\r\n    );\r\n\r\n    if (currentValue?.val != val && state != \"wifiState\") {\r\n      // Set lastUpdate for deviceKey if a value was changed!\r\n      await this.adapter?.setState(\r\n        `${this.productKey}.${this.deviceKey}.lastUpdate`,\r\n        new Date().getTime(),\r\n        true\r\n      );\r\n\r\n      // Check current wifiState, if Disconnected set it to Connected!\r\n      const currentWifiState = await this.adapter.getStateAsync(\r\n        `${this.productKey}.${this.deviceKey}.wifiState`\r\n      );\r\n\r\n      if (currentWifiState && currentWifiState.val == \"Disconnected\") {\r\n        this.updateSolarFlowState(\"wifiState\", \"Connected\");\r\n      }\r\n    }\r\n  }\r\n\r\n  public async updateSolarFlowControlState(\r\n    state: string,\r\n    val: number | string | boolean\r\n  ): Promise<void> {\r\n    // First check if state exist\r\n    const stateExist = await this.adapter?.objectExists(\r\n      `${this.productKey}.${this.deviceKey}.control.${state}`\r\n    );\r\n\r\n    // Update the control state\r\n    if (stateExist) {\r\n      await this.adapter?.setState(\r\n        `${this.productKey}.${this.deviceKey}.control.${state}`,\r\n        val,\r\n        true\r\n      );\r\n    }\r\n  }\r\n\r\n  addOrUpdatePackData = async (\r\n    packData: IPackData[],\r\n    isSolarFlow: boolean\r\n  ): Promise<void> => {\r\n    if (this.adapter && this.productKey && this.deviceKey) {\r\n      await packData.forEach(async (x) => {\r\n        // Process data only with a serial id!\r\n        if (x.sn && this.adapter) {\r\n          // Create channel (e.g. the device specific key)\r\n          // We can determine the type of the battery by the SN number.\r\n          let batType = \"\";\r\n          if (this.productKey == \"yWF7hV\") {\r\n            batType = \"AIO2400\";\r\n          } else if (x.sn.startsWith(\"A\")) {\r\n            batType = \"AB1000\";\r\n          } else if (x.sn.startsWith(\"B\")) {\r\n            batType = \"AB1000S\";\r\n          } else if (x.sn.startsWith(\"C\")) {\r\n            if (x.sn[3] == \"F\") {\r\n              batType = \"AB2000S\";\r\n            } else {\r\n              batType = \"AB2000\";\r\n            }\r\n          } else if (x.sn.startsWith(\"F\")) {\r\n            batType = \"AB3000X\";\r\n          }\r\n\r\n          // Check if is in Pack2device list\r\n          if (!this.batteries.some((y) => y.packSn == x.sn)) {\r\n            this.batteries.push({\r\n              packSn: x.sn,\r\n              type: batType,\r\n            });\r\n\r\n            this.adapter.log.debug(\r\n              `[addOrUpdatePackData] Added battery ${batType} with SN ${x.sn} on deviceKey ${this.deviceKey} to batteries array!`\r\n            );\r\n          }\r\n\r\n          // create a state for the serial id\r\n          const key = (\r\n            this.productKey +\r\n            \".\" +\r\n            this.deviceKey +\r\n            \".packData.\" +\r\n            x.sn\r\n          ).replace(this.adapter.FORBIDDEN_CHARS, \"\");\r\n\r\n          await this.adapter?.extendObject(key, {\r\n            type: \"channel\",\r\n            common: {\r\n              name: {\r\n                de: batType,\r\n                en: batType,\r\n              },\r\n            },\r\n            native: {},\r\n          });\r\n\r\n          await this.adapter?.extendObject(key + \".model\", {\r\n            type: \"state\",\r\n            common: {\r\n              name: {\r\n                de: \"Batterietyp\",\r\n                en: \"Battery type\",\r\n              },\r\n              type: \"string\",\r\n              desc: \"model\",\r\n              role: \"value\",\r\n              read: true,\r\n              write: false,\r\n            },\r\n            native: {},\r\n          });\r\n\r\n          await this.adapter?.setState(key + \".model\", batType, true);\r\n\r\n          await this.adapter?.extendObject(key + \".sn\", {\r\n            type: \"state\",\r\n            common: {\r\n              name: {\r\n                de: \"Seriennummer\",\r\n                en: \"Serial id\",\r\n              },\r\n              type: \"string\",\r\n              desc: \"Serial ID\",\r\n              role: \"value\",\r\n              read: true,\r\n              write: false,\r\n            },\r\n            native: {},\r\n          });\r\n\r\n          await this.adapter?.setState(key + \".sn\", x.sn, true);\r\n\r\n          if (x.socLevel) {\r\n            // State f\u00FCr socLevel\r\n            await this.adapter?.extendObject(key + \".socLevel\", {\r\n              type: \"state\",\r\n              common: {\r\n                name: {\r\n                  de: \"SOC der Batterie\",\r\n                  en: \"soc of battery\",\r\n                },\r\n                type: \"number\",\r\n                desc: \"SOC Level\",\r\n                role: \"value\",\r\n                read: true,\r\n                write: false,\r\n                unit: \"%\",\r\n              },\r\n              native: {},\r\n            });\r\n\r\n            await this.adapter?.setState(key + \".socLevel\", x.socLevel, true);\r\n          }\r\n\r\n          if (x.maxTemp) {\r\n            const maxTempCelsius = x.maxTemp / 10 - 273.15;\r\n            const maxTempState = await this.adapter?.getStateAsync(\r\n              key + \".maxTemp\"\r\n            );\r\n\r\n            // Check if Value exist and changed, if so update lastUpdate!\r\n            if (\r\n              maxTempState &&\r\n              maxTempState.val &&\r\n              maxTempCelsius != maxTempState.val\r\n            ) {\r\n              // Value exist and value changed, update last update!\r\n              await this.adapter?.setState(\r\n                `${this.productKey}.${this.deviceKey}.lastUpdate`,\r\n                new Date().getTime(),\r\n                true\r\n              );\r\n            }\r\n\r\n            // State f\u00FCr maxTemp\r\n            await this.adapter?.extendObject(key + \".maxTemp\", {\r\n              type: \"state\",\r\n              common: {\r\n                name: {\r\n                  de: \"Max. Temperatur der Batterie\",\r\n                  en: \"max temp. of battery\",\r\n                },\r\n                type: \"number\",\r\n                desc: \"Max. Temp\",\r\n                role: \"value\",\r\n                read: true,\r\n                write: false,\r\n                unit: \"\u00B0C\",\r\n              },\r\n              native: {},\r\n            });\r\n\r\n            // Convert Kelvin to Celsius\r\n            await this.adapter?.setState(\r\n              key + \".maxTemp\",\r\n              maxTempCelsius,\r\n              true\r\n            );\r\n          }\r\n\r\n          if (x.minVol) {\r\n            const minVol = x.minVol / 100;\r\n            const minVolState = await this.adapter?.getStateAsync(\r\n              key + \".minVol\"\r\n            );\r\n\r\n            // Check if Value exist and changed, if so update lastUpdate!\r\n            if (minVolState && minVolState.val && minVol != minVolState.val) {\r\n              // Value exist and value changed, update last update!\r\n              await this.adapter?.setState(\r\n                `${this.productKey}.${this.deviceKey}.lastUpdate`,\r\n                new Date().getTime(),\r\n                true\r\n              );\r\n            }\r\n\r\n            await this.adapter?.extendObject(key + \".minVol\", {\r\n              type: \"state\",\r\n              common: {\r\n                name: \"minVol\",\r\n                type: \"number\",\r\n                desc: \"minVol\",\r\n                role: \"value\",\r\n                read: true,\r\n                write: false,\r\n                unit: \"V\",\r\n              },\r\n              native: {},\r\n            });\r\n\r\n            await this.adapter?.setState(key + \".minVol\", minVol, true);\r\n          }\r\n\r\n          if (x.batcur) {\r\n            await this.adapter?.extendObject(key + \".batcur\", {\r\n              type: \"state\",\r\n              common: {\r\n                name: \"batcur\",\r\n                type: \"number\",\r\n                desc: \"batcur\",\r\n                role: \"value\",\r\n                read: true,\r\n                write: false,\r\n                unit: \"A\",\r\n              },\r\n              native: {},\r\n            });\r\n\r\n            await this.adapter?.setState(key + \".batcur\", x.batcur / 10, true);\r\n          }\r\n\r\n          // Check if Value exist and changed, if so update lastUpdate!\r\n          if (x.maxVol) {\r\n            const maxVol = x.maxVol / 100;\r\n            const maxVolState = await this.adapter?.getStateAsync(\r\n              key + \".maxVol\"\r\n            );\r\n\r\n            if (maxVolState && maxVolState.val && maxVol != maxVolState.val) {\r\n              // Value exist and value changed, update last update!\r\n              await this.adapter?.setState(\r\n                `${this.productKey}.${this.deviceKey}.lastUpdate`,\r\n                new Date().getTime(),\r\n                true\r\n              );\r\n            }\r\n\r\n            await this.adapter?.extendObject(key + \".maxVol\", {\r\n              type: \"state\",\r\n              common: {\r\n                name: \"maxVol\",\r\n                type: \"number\",\r\n                desc: \"maxVol\",\r\n                role: \"value\",\r\n                read: true,\r\n                write: false,\r\n                unit: \"V\",\r\n              },\r\n              native: {},\r\n            });\r\n\r\n            await this.adapter?.setState(key + \".maxVol\", maxVol, true);\r\n          }\r\n\r\n          // Check if Value exist and changed, if so update lastUpdate!\r\n          if (x.totalVol) {\r\n            const totalVol = x.totalVol / 100;\r\n\r\n            const totalVolState = await this.adapter?.getStateAsync(\r\n              key + \".totalVol\"\r\n            );\r\n\r\n            if (\r\n              totalVolState &&\r\n              totalVolState.val &&\r\n              totalVol != totalVolState.val\r\n            ) {\r\n              // Value exist and value changed, update last update!\r\n              await this.adapter?.setState(\r\n                `${this.productKey}.${this.deviceKey}.lastUpdate`,\r\n                new Date().getTime(),\r\n                true\r\n              );\r\n            }\r\n\r\n            await this.adapter?.extendObject(key + \".totalVol\", {\r\n              type: \"state\",\r\n              common: {\r\n                name: \"totalVol\",\r\n                type: \"number\",\r\n                desc: \"totalVol\",\r\n                role: \"value\",\r\n                read: true,\r\n                write: false,\r\n                unit: \"V\",\r\n              },\r\n              native: {},\r\n            });\r\n\r\n            await this.adapter?.setState(key + \".totalVol\", totalVol, true);\r\n\r\n            // Send Voltage to checkVoltage Method (only if is Solarflow device)\r\n            if (isSolarFlow) {\r\n              this.checkVoltage(totalVol);\r\n            }\r\n          }\r\n\r\n          if (x.soh) {\r\n            await this.adapter?.extendObject(key + \".soh\", {\r\n              type: \"state\",\r\n              common: {\r\n                name: {\r\n                  de: \"Gesundheitszustand\",\r\n                  en: \"State of Health\",\r\n                },\r\n                type: \"number\",\r\n                desc: \"State of Health\",\r\n                role: \"value\",\r\n                read: true,\r\n                write: false,\r\n                unit: \"%\",\r\n              },\r\n              native: {},\r\n            });\r\n\r\n            await this.adapter?.setState(key + \".soh\", x.soh / 10, true);\r\n          }\r\n\r\n          if (x.power) {\r\n            await this.adapter?.extendObject(key + \".power\", {\r\n              type: \"state\",\r\n              common: {\r\n                name: {\r\n                  de: \"Energie\",\r\n                  en: \"Power\",\r\n                },\r\n                type: \"number\",\r\n                desc: \"Power\",\r\n                read: true,\r\n                write: false,\r\n                role: \"value.power\",\r\n                unit: \"W\",\r\n              },\r\n              native: {},\r\n            });\r\n\r\n            await this.adapter?.setState(key + \".power\", x.power, true);\r\n          }\r\n\r\n          // Debug, send message if property is unknown!\r\n          let found = false;\r\n\r\n          Object.entries(x).forEach(([key, value]) => {\r\n            knownPackDataProperties.forEach((property: string) => {\r\n              if (property == key) {\r\n                found = true;\r\n              }\r\n            });\r\n\r\n            if (found) {\r\n              //console.log(\r\n              //  `${productName?.val}: ${key} with value ${value} is a KNOWN Mqtt Prop!`\r\n              //);\r\n            } else {\r\n              this.adapter?.log.debug(\r\n                `[addOrUpdatePackData] ${key} with value ${value} is a UNKNOWN PackData Mqtt Property!`\r\n              );\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  public async checkVoltage(voltage: number): Promise<void> {\r\n    if (voltage < 46.1) {\r\n      if (this.adapter.config.useCalculation) {\r\n        this.setSocToZero();\r\n      }\r\n\r\n      if (this.adapter.config.useLowVoltageBlock) {\r\n        // Activate Low Voltage Block\r\n        await this.adapter?.setState(\r\n          `${this.productKey}.${this.deviceKey}.control.lowVoltageBlock`,\r\n          true,\r\n          true\r\n        );\r\n\r\n        // Low Voltage Block activated, stop power input immediately\r\n        const autoModel = (\r\n          await this.adapter.getStateAsync(\r\n            this.productKey + \".\" + this.deviceKey + \".autoModel\"\r\n          )\r\n        )?.val;\r\n        if (autoModel == 8) {\r\n          this.setDeviceAutomationInOutLimit(0);\r\n        } else {\r\n          this.setOutputLimit(0);\r\n        }\r\n\r\n        if (this.adapter.config.forceShutdownOnLowVoltage) {\r\n          const currentSoc = await this.adapter.getStateAsync(\r\n            `${this.productKey}.${this.deviceKey}.electricLevel`\r\n          );\r\n\r\n          if (currentSoc && Number(currentSoc.val) > 50) {\r\n            // We can't shut down the device. Full charge needed!\r\n            if (this.adapter.config.fullChargeIfNeeded) {\r\n              await this.adapter?.setState(\r\n                `${this.productKey}.${this.deviceKey}.control.fullChargeNeeded`,\r\n                true,\r\n                true\r\n              );\r\n            }\r\n          } else {\r\n            if (currentSoc && currentSoc.val) {\r\n              this.setDischargeLimit(Number(currentSoc.val));\r\n            }\r\n\r\n            // Check if device setting is correct\r\n            const hubState = await this.adapter.getStateAsync(\r\n              `${this.productKey}.${this.deviceKey}.hubState`\r\n            );\r\n\r\n            if (!hubState || Number(hubState.val) != 1) {\r\n              this.adapter.log.warn(\r\n                `[checkVoltage] hubState is not set to 'Stop output and shut down', device will NOT go offline!`\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (voltage >= 47.5) {\r\n      // Deactivate Low Voltage Block\r\n      const lowVoltageBlock = await this.adapter.getStateAsync(\r\n        `${this.productKey}.${this.deviceKey}.control.lowVoltageBlock`\r\n      );\r\n\r\n      if (lowVoltageBlock && lowVoltageBlock.val == true) {\r\n        await this.adapter?.setState(\r\n          `${this.productKey}.${this.deviceKey}.control.lowVoltageBlock`,\r\n          false,\r\n          true\r\n        );\r\n\r\n        if (\r\n          this.adapter.config.useLowVoltageBlock &&\r\n          this.adapter.config.forceShutdownOnLowVoltage\r\n        ) {\r\n          this.setDischargeLimit(\r\n            this.adapter.config.dischargeLimit\r\n              ? this.adapter.config.dischargeLimit\r\n              : 5\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates the energy for all items in 'calculationStateKeys'.\r\n   *\r\n   * @returns Promise<void>\r\n   *\r\n   * @beta\r\n   */\r\n  public calculateEnergy(): void {\r\n    calculationStateKeys.forEach(async (stateKey) => {\r\n      let stateNameEnergyWh = \"\";\r\n      let stateNameEnergykWh = \"\";\r\n      let stateNamePower = \"\";\r\n\r\n      if (stateKey == \"pvPower1\") {\r\n        stateNameEnergyWh = `${this.productKey}.${this.deviceKey}.calculations.solarInputPv1EnergyTodayWh`;\r\n        stateNameEnergykWh = `${this.productKey}.${this.deviceKey}.calculations.solarInputPv1EnergyTodaykWh`;\r\n        stateNamePower = `${this.productKey}.${this.deviceKey}.pvPower1`;\r\n      } else if (stateKey == \"pvPower2\") {\r\n        stateNameEnergyWh = `${this.productKey}.${this.deviceKey}.calculations.solarInputPv2EnergyTodayWh`;\r\n        stateNameEnergykWh = `${this.productKey}.${this.deviceKey}.calculations.solarInputPv2EnergyTodaykWh`;\r\n        stateNamePower = `${this.productKey}.${this.deviceKey}.pvPower2`;\r\n      } else {\r\n        stateNameEnergyWh = `${this.productKey}.${this.deviceKey}.calculations.${stateKey}EnergyTodayWh`;\r\n        stateNameEnergykWh = `${this.productKey}.${this.deviceKey}.calculations.${stateKey}EnergyTodaykWh`;\r\n        stateNamePower = `${this.productKey}.${this.deviceKey}.${stateKey}Power`;\r\n      }\r\n\r\n      const currentPowerState =\r\n        await this.adapter?.getStateAsync(stateNamePower);\r\n      const currentEnergyState =\r\n        await this.adapter?.getStateAsync(stateNameEnergyWh);\r\n\r\n      if (currentEnergyState?.val == 0) {\r\n        // Workaround, set Val to very low value to avoid Jump in data...\r\n        await this.adapter?.setState(stateNameEnergyWh, 0.000001, true);\r\n      } else if (\r\n        currentEnergyState &&\r\n        currentEnergyState.lc &&\r\n        currentPowerState &&\r\n        currentPowerState.val != undefined &&\r\n        currentPowerState.val != null\r\n      ) {\r\n        // Timeframe = 30000ms, Job runs every 30 seconds...\r\n        const timeFrame = 30000;\r\n\r\n        // Calculate Energy value (Wh) from current power in the timeframe from last run...\r\n        const addEnergyValue =\r\n          (Number(currentPowerState.val) * timeFrame) / 3600000; // Wh\r\n\r\n        /*       // Use efficiency factor (used the one from Youtube Channel VoltAmpereLux - thanks!)\r\n      const chargingFactor = 0.96; // Efficiency 96%\r\n      const dischargingFactor = 1.08 - addEnergyValue / 10000; // Efficiency 92% - 98% (92% + Energy / 10000 = 600W -> +6%)\r\n\r\n      // Calculate energy from efficiency factor if value for charging or discharging\r\n      addEnergyValue =\r\n        stateKey == \"outputPack\" && addEnergyValue > 0\r\n          ? addEnergyValue * chargingFactor\r\n          : addEnergyValue;\r\n      addEnergyValue =\r\n        stateKey == \"packInput\" && addEnergyValue > 0\r\n          ? addEnergyValue * dischargingFactor\r\n          : addEnergyValue; */\r\n\r\n        let newEnergyValue = Number(currentEnergyState.val) + addEnergyValue;\r\n\r\n        // Fix negative value\r\n        if (newEnergyValue < 0) {\r\n          newEnergyValue = 0;\r\n        }\r\n\r\n        await this.adapter?.setState(stateNameEnergyWh, newEnergyValue, true);\r\n        await this.adapter?.setState(\r\n          stateNameEnergykWh,\r\n          Number((newEnergyValue / 1000).toFixed(2)),\r\n          true\r\n        );\r\n\r\n        // SOC and energy in batteries\r\n        if (\r\n          (stateKey == \"outputPack\" || stateKey == \"packInput\") &&\r\n          addEnergyValue > 0\r\n        ) {\r\n          await this.calculateSocAndEnergy(stateKey, addEnergyValue);\r\n        } else {\r\n          if (stateKey == \"outputPack\") {\r\n            await this.adapter?.setState(\r\n              `${this.productKey}.${this.deviceKey}.calculations.remainInputTime`,\r\n              \"\",\r\n              true\r\n            );\r\n          } else if (stateKey == \"packInput\") {\r\n            await this.adapter?.setState(\r\n              `${this.productKey}.${this.deviceKey}.calculations.remainOutTime`,\r\n              \"\",\r\n              true\r\n            );\r\n          }\r\n        }\r\n      } else {\r\n        await this.adapter?.setState(stateNameEnergyWh, 0, true);\r\n        await this.adapter?.setState(stateNameEnergykWh, 0, true);\r\n      }\r\n    });\r\n  }\r\n\r\n  public calculateSocAndEnergy = async (\r\n    stateKey: string,\r\n    value: number\r\n  ): Promise<void> => {\r\n    this.adapter.log.debug(\r\n      `[calculateSocAndEnergy] Calculating for: ${this.productKey}.${this.deviceKey} and stateKey ${stateKey}!`\r\n    );\r\n\r\n    let energyWhMax: number | undefined = undefined;\r\n\r\n    const minSoc = (\r\n      await this.adapter.getStateAsync(\r\n        `${this.productKey}.${this.deviceKey}.minSoc`\r\n      )\r\n    )?.val;\r\n    const currentSoc = (\r\n      await this.adapter.getStateAsync(\r\n        `${this.productKey}.${this.deviceKey}.electricLevel`\r\n      )\r\n    )?.val;\r\n\r\n    if (currentSoc && minSoc && Number(currentSoc) < Number(minSoc)) {\r\n      // Don't calculate if current SOC is lower then minimum\r\n      this.adapter.log.debug(\r\n        `[calculateSocAndEnergy] Don't calculate, currentSoc (${Number(currentSoc)}) is lower than minSoc (${Number(minSoc)})!`\r\n      );\r\n\r\n      return;\r\n    }\r\n\r\n    const currentEnergyState = await this.adapter?.getStateAsync(\r\n      this.productKey + \".\" + this.deviceKey + \".calculations.energyWh\"\r\n    );\r\n\r\n    const currentEnergyMaxState = await this.adapter?.getStateAsync(\r\n      this.productKey + \".\" + this.deviceKey + \".calculations.energyWhMax\"\r\n    );\r\n\r\n    const lowVoltageBlock = await this.adapter?.getStateAsync(\r\n      this.productKey + \".\" + this.deviceKey + \".control.lowVoltageBlock\"\r\n    );\r\n\r\n    const currentMaxValue = Number(\r\n      currentEnergyMaxState ? currentEnergyMaxState.val : 0\r\n    );\r\n\r\n    const currentEnergyWh = currentEnergyState?.val\r\n      ? Number(currentEnergyState?.val)\r\n      : 0;\r\n\r\n    if (this.productKey == \"yWF7hV\") {\r\n      // The device is an AIO 2400, so set maximum Wh to 2400!\r\n      energyWhMax = 2400;\r\n    } else {\r\n      // Iterate over all batteries!\r\n      for (let i = 0; i < this.batteries.length; i++) {\r\n        if (this.batteries[i].type == \"AB1000\") {\r\n          energyWhMax = (energyWhMax ? energyWhMax : 0) + 960;\r\n        } else if (this.batteries[i].type == \"AB2000\") {\r\n          energyWhMax = (energyWhMax ? energyWhMax : 0) + 1920;\r\n        }\r\n      }\r\n    }\r\n\r\n    // newValue is the current available energy in the batteries. If outputPack (charging) add value, if packInput (discharging) subtract value.\r\n    let newEnergyWh =\r\n      stateKey == \"outputPack\"\r\n        ? currentEnergyWh + value\r\n        : currentEnergyWh - value;\r\n\r\n    // If greater than Max of batteries, set it to this value.\r\n    if (\r\n      stateKey == \"outputPack\" &&\r\n      energyWhMax != undefined &&\r\n      newEnergyWh > energyWhMax\r\n    ) {\r\n      newEnergyWh = energyWhMax;\r\n\r\n      this.adapter.log.debug(\r\n        `[calculateSocAndEnergy] newEnergyWh (${newEnergyWh}) is greater than energyWhMax (${energyWhMax}), don't extend value!`\r\n      );\r\n    }\r\n\r\n    if (newEnergyWh > 0) {\r\n      this.adapter?.setState(\r\n        `${this.productKey}.${this.deviceKey}.calculations.energyWh`,\r\n        newEnergyWh,\r\n        true\r\n      );\r\n\r\n      this.adapter.log.debug(\r\n        `[calculateSocAndEnergy] set '${this.productKey}.${this.deviceKey}.calculations.energyWh' to ${newEnergyWh}!`\r\n      );\r\n\r\n      if (currentEnergyMaxState) {\r\n        const soc = Number(((newEnergyWh / currentMaxValue) * 100).toFixed(1));\r\n\r\n        await this.adapter?.setState(\r\n          `${this.productKey}.${this.deviceKey}.calculations.soc`,\r\n          soc > 100.0 ? 100 : soc,\r\n          true\r\n        );\r\n\r\n        if (newEnergyWh > currentMaxValue && !lowVoltageBlock?.val) {\r\n          // Extend maxVal\r\n          await this.adapter?.setState(\r\n            `${this.productKey}.${this.deviceKey}.calculations.energyWhMax`,\r\n            newEnergyWh,\r\n            true\r\n          );\r\n        }\r\n\r\n        const currentOutputPackPower = await this.adapter?.getStateAsync(\r\n          `${this.productKey}.${this.deviceKey}.outputPackPower`\r\n        );\r\n\r\n        const currentPackInputPower = await this.adapter?.getStateAsync(\r\n          this.productKey + \".\" + this.deviceKey + \".packInputPower\"\r\n        );\r\n\r\n        if (\r\n          stateKey == \"outputPack\" &&\r\n          currentOutputPackPower?.val != null &&\r\n          currentOutputPackPower != undefined\r\n        ) {\r\n          // Charging, calculate remaining charging time\r\n          const toCharge = currentMaxValue - newEnergyWh;\r\n\r\n          const remainHoursAsDecimal =\r\n            toCharge / Number(currentOutputPackPower.val);\r\n\r\n          if (remainHoursAsDecimal < 48.0) {\r\n            const remainFormatted = toHoursAndMinutes(\r\n              Math.round(remainHoursAsDecimal * 60)\r\n            );\r\n\r\n            await this.adapter?.setState(\r\n              `${this.productKey}.${this.deviceKey}.calculations.remainInputTime`,\r\n              remainFormatted,\r\n              true\r\n            );\r\n          } else {\r\n            await this.adapter?.setState(\r\n              `${this.productKey}.${this.deviceKey}.calculations.remainInputTime`,\r\n              \"\",\r\n              true\r\n            );\r\n          }\r\n        } else if (\r\n          stateKey == \"packInput\" &&\r\n          currentPackInputPower != null &&\r\n          currentPackInputPower != undefined\r\n        ) {\r\n          // Discharging, calculate remaining discharge time\r\n          const remainHoursAsDecimal =\r\n            newEnergyWh / Number(currentPackInputPower.val);\r\n          const remainFormatted = toHoursAndMinutes(\r\n            Math.round(remainHoursAsDecimal * 60)\r\n          );\r\n\r\n          if (remainHoursAsDecimal < 48.0) {\r\n            await this.adapter?.setState(\r\n              `${this.productKey}.${this.deviceKey}.calculations.remainOutTime`,\r\n              remainFormatted,\r\n              true\r\n            );\r\n          } else {\r\n            await this.adapter?.setState(\r\n              `${this.productKey}.${this.deviceKey}.calculations.remainOutTime`,\r\n              \"\",\r\n              true\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else if (newEnergyWh <= 0 && stateKey == \"outputPack\") {\r\n      await this.adapter?.setState(\r\n        `${this.productKey}.${this.deviceKey}.calculations.remainInputTime`,\r\n        \"\",\r\n        true\r\n      );\r\n    } else if (newEnergyWh <= 0 && stateKey == \"packInput\") {\r\n      await this.adapter?.setState(\r\n        `${this.productKey}.${this.deviceKey}.calculations.remainOutTime`,\r\n        \"\",\r\n        true\r\n      );\r\n\r\n      // TEST: if SOC == 0, add newValue as positive to energyWhMax\r\n      const newEnergyWhPositive = Math.abs(newEnergyWh);\r\n\r\n      if (energyWhMax && currentMaxValue + newEnergyWhPositive <= energyWhMax) {\r\n        await this.adapter?.setState(\r\n          `${this.productKey}.${this.deviceKey}.calculations.energyWhMax`,\r\n          currentMaxValue + newEnergyWhPositive,\r\n          true\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  public async setSocToZero(): Promise<void> {\r\n    // Set SOC to 0\r\n    await this.adapter?.setState(\r\n      `${this.productKey}.${this.deviceKey}.calculations.soc`,\r\n      0,\r\n      true\r\n    );\r\n\r\n    // Calculate new Wh Max Value\r\n    const energyWhState = await this.adapter.getStateAsync(\r\n      `${this.productKey}.${this.deviceKey}.calculations.energyWh`\r\n    );\r\n    const energyWhMaxState = await this.adapter.getStateAsync(\r\n      `${this.productKey}.${this.deviceKey}.calculations.energyWhMax`\r\n    );\r\n\r\n    const newMax = Number(energyWhMaxState?.val) - Number(energyWhState?.val);\r\n\r\n    // Set Max Energy to value minus current energy\r\n    await this.adapter?.setState(\r\n      `${this.productKey}.${this.deviceKey}.calculations.energyWhMax`,\r\n      newMax,\r\n      true\r\n    );\r\n\r\n    // Set Energy in Battery to 0\r\n    await this.adapter?.setState(\r\n      `${this.productKey}.${this.deviceKey}.calculations.energyWh`,\r\n      0,\r\n      true\r\n    );\r\n  }\r\n\r\n  public async setEnergyWhMax(): Promise<void> {\r\n    const currentEnergyState = await this.adapter?.getStateAsync(\r\n      this.productKey + \".\" + this.deviceKey + \".calculations.energyWh\"\r\n    );\r\n\r\n    if (currentEnergyState) {\r\n      await this.adapter?.setState(\r\n        `${this.productKey}.${this.deviceKey}.calculations.energyWhMax`,\r\n        currentEnergyState?.val,\r\n        true\r\n      );\r\n    }\r\n  }\r\n\r\n  public resetValuesForDevice(): void {\r\n    calculationStateKeys.forEach(async (stateKey: string) => {\r\n      let stateNameEnergyWh = \"\";\r\n      let stateNameEnergykWh = \"\";\r\n\r\n      if (stateKey == \"pvPower1\") {\r\n        stateNameEnergyWh = `${this.productKey}.${this.deviceKey}.calculations.solarInputPv1EnergyTodayWh`;\r\n        stateNameEnergykWh = `${this.productKey}.${this.deviceKey}.calculations.solarInputPv1EnergyTodaykWh`;\r\n      } else if (stateKey == \"pvPower2\") {\r\n        stateNameEnergyWh = `${this.productKey}.${this.deviceKey}.calculations.solarInputPv2EnergyTodayWh`;\r\n        stateNameEnergykWh = `${this.productKey}.${this.deviceKey}.calculations.solarInputPv2EnergyTodaykWh`;\r\n      } else {\r\n        stateNameEnergyWh = `${this.productKey}.${this.deviceKey}.calculations.${stateKey}EnergyTodayWh`;\r\n        stateNameEnergykWh = `${this.productKey}.${this.deviceKey}.calculations.${stateKey}EnergyTodaykWh`;\r\n      }\r\n\r\n      await this.adapter?.setState(stateNameEnergyWh, 0, true);\r\n      await this.adapter?.setState(stateNameEnergykWh, 0, true);\r\n    });\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAqC;AACrC,qCAAwC;AACxC,wBAAkC;AAElC,+BAIO;AAMA,MAAM,YAAY;AAAA,EAmBhB,YACL,UACA,aACA,YACA,cACA,aACA,qBACA;AAlBF,SAAO,YAA2B,CAAC;AAEnC,SAAO,WAAmB;AAC1B,SAAO,gBAAgB;AAEvB,SAAO,gBAAwB;AAC/B,SAAO,iBAAyB;AAEhC,SAAO,SAA4B,CAAC;AACpC,SAAO,gBAAmC,CAAC;AA8kB3C,+BAAsB,OACpB,UACA,gBACkB;AAClB,UAAI,KAAK,WAAW,KAAK,cAAc,KAAK,WAAW;AACrD,cAAM,SAAS,QAAQ,OAAO,MAAM;AAlnB1C;AAonBQ,cAAI,EAAE,MAAM,KAAK,SAAS;AAGxB,gBAAI,UAAU;AACd,gBAAI,KAAK,cAAc,UAAU;AAC/B,wBAAU;AAAA,YACZ,WAAW,EAAE,GAAG,WAAW,GAAG,GAAG;AAC/B,wBAAU;AAAA,YACZ,WAAW,EAAE,GAAG,WAAW,GAAG,GAAG;AAC/B,wBAAU;AAAA,YACZ,WAAW,EAAE,GAAG,WAAW,GAAG,GAAG;AAC/B,kBAAI,EAAE,GAAG,CAAC,KAAK,KAAK;AAClB,0BAAU;AAAA,cACZ,OAAO;AACL,0BAAU;AAAA,cACZ;AAAA,YACF,WAAW,EAAE,GAAG,WAAW,GAAG,GAAG;AAC/B,wBAAU;AAAA,YACZ;AAGA,gBAAI,CAAC,KAAK,UAAU,KAAK,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE,GAAG;AACjD,mBAAK,UAAU,KAAK;AAAA,gBAClB,QAAQ,EAAE;AAAA,gBACV,MAAM;AAAA,cACR,CAAC;AAED,mBAAK,QAAQ,IAAI;AAAA,gBACf,uCAAuC,OAAO,YAAY,EAAE,EAAE,iBAAiB,KAAK,SAAS;AAAA,cAC/F;AAAA,YACF;AAGA,kBAAM,OACJ,KAAK,aACL,MACA,KAAK,YACL,eACA,EAAE,IACF,QAAQ,KAAK,QAAQ,iBAAiB,EAAE;AAE1C,oBAAM,UAAK,YAAL,mBAAc,aAAa,KAAK;AAAA,cACpC,MAAM;AAAA,cACN,QAAQ;AAAA,gBACN,MAAM;AAAA,kBACJ,IAAI;AAAA,kBACJ,IAAI;AAAA,gBACN;AAAA,cACF;AAAA,cACA,QAAQ,CAAC;AAAA,YACX;AAEA,oBAAM,UAAK,YAAL,mBAAc,aAAa,MAAM,UAAU;AAAA,cAC/C,MAAM;AAAA,cACN,QAAQ;AAAA,gBACN,MAAM;AAAA,kBACJ,IAAI;AAAA,kBACJ,IAAI;AAAA,gBACN;AAAA,gBACA,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,OAAO;AAAA,cACT;AAAA,cACA,QAAQ,CAAC;AAAA,YACX;AAEA,oBAAM,UAAK,YAAL,mBAAc,SAAS,MAAM,UAAU,SAAS;AAEtD,oBAAM,UAAK,YAAL,mBAAc,aAAa,MAAM,OAAO;AAAA,cAC5C,MAAM;AAAA,cACN,QAAQ;AAAA,gBACN,MAAM;AAAA,kBACJ,IAAI;AAAA,kBACJ,IAAI;AAAA,gBACN;AAAA,gBACA,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,OAAO;AAAA,cACT;AAAA,cACA,QAAQ,CAAC;AAAA,YACX;AAEA,oBAAM,UAAK,YAAL,mBAAc,SAAS,MAAM,OAAO,EAAE,IAAI;AAEhD,gBAAI,EAAE,UAAU;AAEd,sBAAM,UAAK,YAAL,mBAAc,aAAa,MAAM,aAAa;AAAA,gBAClD,MAAM;AAAA,gBACN,QAAQ;AAAA,kBACN,MAAM;AAAA,oBACJ,IAAI;AAAA,oBACJ,IAAI;AAAA,kBACN;AAAA,kBACA,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,OAAO;AAAA,kBACP,MAAM;AAAA,gBACR;AAAA,gBACA,QAAQ,CAAC;AAAA,cACX;AAEA,sBAAM,UAAK,YAAL,mBAAc,SAAS,MAAM,aAAa,EAAE,UAAU;AAAA,YAC9D;AAEA,gBAAI,EAAE,SAAS;AACb,oBAAM,iBAAiB,EAAE,UAAU,KAAK;AACxC,oBAAM,eAAe,QAAM,UAAK,YAAL,mBAAc;AAAA,gBACvC,MAAM;AAAA;AAIR,kBACE,gBACA,aAAa,OACb,kBAAkB,aAAa,KAC/B;AAEA,wBAAM,UAAK,YAAL,mBAAc;AAAA,kBAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,mBACpC,oBAAI,KAAK,GAAE,QAAQ;AAAA,kBACnB;AAAA;AAAA,cAEJ;AAGA,sBAAM,UAAK,YAAL,mBAAc,aAAa,MAAM,YAAY;AAAA,gBACjD,MAAM;AAAA,gBACN,QAAQ;AAAA,kBACN,MAAM;AAAA,oBACJ,IAAI;AAAA,oBACJ,IAAI;AAAA,kBACN;AAAA,kBACA,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,OAAO;AAAA,kBACP,MAAM;AAAA,gBACR;AAAA,gBACA,QAAQ,CAAC;AAAA,cACX;AAGA,sBAAM,UAAK,YAAL,mBAAc;AAAA,gBAClB,MAAM;AAAA,gBACN;AAAA,gBACA;AAAA;AAAA,YAEJ;AAEA,gBAAI,EAAE,QAAQ;AACZ,oBAAM,SAAS,EAAE,SAAS;AAC1B,oBAAM,cAAc,QAAM,UAAK,YAAL,mBAAc;AAAA,gBACtC,MAAM;AAAA;AAIR,kBAAI,eAAe,YAAY,OAAO,UAAU,YAAY,KAAK;AAE/D,wBAAM,UAAK,YAAL,mBAAc;AAAA,kBAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,mBACpC,oBAAI,KAAK,GAAE,QAAQ;AAAA,kBACnB;AAAA;AAAA,cAEJ;AAEA,sBAAM,UAAK,YAAL,mBAAc,aAAa,MAAM,WAAW;AAAA,gBAChD,MAAM;AAAA,gBACN,QAAQ;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,OAAO;AAAA,kBACP,MAAM;AAAA,gBACR;AAAA,gBACA,QAAQ,CAAC;AAAA,cACX;AAEA,sBAAM,UAAK,YAAL,mBAAc,SAAS,MAAM,WAAW,QAAQ;AAAA,YACxD;AAEA,gBAAI,EAAE,QAAQ;AACZ,sBAAM,UAAK,YAAL,mBAAc,aAAa,MAAM,WAAW;AAAA,gBAChD,MAAM;AAAA,gBACN,QAAQ;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,OAAO;AAAA,kBACP,MAAM;AAAA,gBACR;AAAA,gBACA,QAAQ,CAAC;AAAA,cACX;AAEA,sBAAM,UAAK,YAAL,mBAAc,SAAS,MAAM,WAAW,EAAE,SAAS,IAAI;AAAA,YAC/D;AAGA,gBAAI,EAAE,QAAQ;AACZ,oBAAM,SAAS,EAAE,SAAS;AAC1B,oBAAM,cAAc,QAAM,UAAK,YAAL,mBAAc;AAAA,gBACtC,MAAM;AAAA;AAGR,kBAAI,eAAe,YAAY,OAAO,UAAU,YAAY,KAAK;AAE/D,wBAAM,UAAK,YAAL,mBAAc;AAAA,kBAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,mBACpC,oBAAI,KAAK,GAAE,QAAQ;AAAA,kBACnB;AAAA;AAAA,cAEJ;AAEA,sBAAM,UAAK,YAAL,mBAAc,aAAa,MAAM,WAAW;AAAA,gBAChD,MAAM;AAAA,gBACN,QAAQ;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,OAAO;AAAA,kBACP,MAAM;AAAA,gBACR;AAAA,gBACA,QAAQ,CAAC;AAAA,cACX;AAEA,sBAAM,UAAK,YAAL,mBAAc,SAAS,MAAM,WAAW,QAAQ;AAAA,YACxD;AAGA,gBAAI,EAAE,UAAU;AACd,oBAAM,WAAW,EAAE,WAAW;AAE9B,oBAAM,gBAAgB,QAAM,UAAK,YAAL,mBAAc;AAAA,gBACxC,MAAM;AAAA;AAGR,kBACE,iBACA,cAAc,OACd,YAAY,cAAc,KAC1B;AAEA,wBAAM,UAAK,YAAL,mBAAc;AAAA,kBAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,mBACpC,oBAAI,KAAK,GAAE,QAAQ;AAAA,kBACnB;AAAA;AAAA,cAEJ;AAEA,sBAAM,UAAK,YAAL,mBAAc,aAAa,MAAM,aAAa;AAAA,gBAClD,MAAM;AAAA,gBACN,QAAQ;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,OAAO;AAAA,kBACP,MAAM;AAAA,gBACR;AAAA,gBACA,QAAQ,CAAC;AAAA,cACX;AAEA,sBAAM,UAAK,YAAL,mBAAc,SAAS,MAAM,aAAa,UAAU;AAG1D,kBAAI,aAAa;AACf,qBAAK,aAAa,QAAQ;AAAA,cAC5B;AAAA,YACF;AAEA,gBAAI,EAAE,KAAK;AACT,sBAAM,UAAK,YAAL,mBAAc,aAAa,MAAM,QAAQ;AAAA,gBAC7C,MAAM;AAAA,gBACN,QAAQ;AAAA,kBACN,MAAM;AAAA,oBACJ,IAAI;AAAA,oBACJ,IAAI;AAAA,kBACN;AAAA,kBACA,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,OAAO;AAAA,kBACP,MAAM;AAAA,gBACR;AAAA,gBACA,QAAQ,CAAC;AAAA,cACX;AAEA,sBAAM,UAAK,YAAL,mBAAc,SAAS,MAAM,QAAQ,EAAE,MAAM,IAAI;AAAA,YACzD;AAEA,gBAAI,EAAE,OAAO;AACX,sBAAM,UAAK,YAAL,mBAAc,aAAa,MAAM,UAAU;AAAA,gBAC/C,MAAM;AAAA,gBACN,QAAQ;AAAA,kBACN,MAAM;AAAA,oBACJ,IAAI;AAAA,oBACJ,IAAI;AAAA,kBACN;AAAA,kBACA,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,MAAM;AAAA,kBACN,OAAO;AAAA,kBACP,MAAM;AAAA,kBACN,MAAM;AAAA,gBACR;AAAA,gBACA,QAAQ,CAAC;AAAA,cACX;AAEA,sBAAM,UAAK,YAAL,mBAAc,SAAS,MAAM,UAAU,EAAE,OAAO;AAAA,YACxD;AAGA,gBAAI,QAAQ;AAEZ,mBAAO,QAAQ,CAAC,EAAE,QAAQ,CAAC,CAACA,MAAK,KAAK,MAAM;AA57BtD,kBAAAC;AA67BY,+DAAwB,QAAQ,CAAC,aAAqB;AACpD,oBAAI,YAAYD,MAAK;AACnB,0BAAQ;AAAA,gBACV;AAAA,cACF,CAAC;AAED,kBAAI,OAAO;AAAA,cAIX,OAAO;AACL,iBAAAC,MAAA,KAAK,YAAL,gBAAAA,IAAc,IAAI;AAAA,kBAChB,yBAAyBD,IAAG,eAAe,KAAK;AAAA;AAAA,cAEpD;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAgMA,SAAO,wBAAwB,OAC7B,UACA,UACkB;AAnpCtB;AAopCI,WAAK,QAAQ,IAAI;AAAA,QACf,4CAA4C,KAAK,UAAU,IAAI,KAAK,SAAS,iBAAiB,QAAQ;AAAA,MACxG;AAEA,UAAI,cAAkC;AAEtC,YAAM,UACJ,WAAM,KAAK,QAAQ;AAAA,QACjB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,MACtC,MAFA,mBAGC;AACH,YAAM,cACJ,WAAM,KAAK,QAAQ;AAAA,QACjB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,MACtC,MAFA,mBAGC;AAEH,UAAI,cAAc,UAAU,OAAO,UAAU,IAAI,OAAO,MAAM,GAAG;AAE/D,aAAK,QAAQ,IAAI;AAAA,UACf,wDAAwD,OAAO,UAAU,CAAC,2BAA2B,OAAO,MAAM,CAAC;AAAA,QACrH;AAEA;AAAA,MACF;AAEA,YAAM,qBAAqB,QAAM,UAAK,YAAL,mBAAc;AAAA,QAC7C,KAAK,aAAa,MAAM,KAAK,YAAY;AAAA;AAG3C,YAAM,wBAAwB,QAAM,UAAK,YAAL,mBAAc;AAAA,QAChD,KAAK,aAAa,MAAM,KAAK,YAAY;AAAA;AAG3C,YAAM,kBAAkB,QAAM,UAAK,YAAL,mBAAc;AAAA,QAC1C,KAAK,aAAa,MAAM,KAAK,YAAY;AAAA;AAG3C,YAAM,kBAAkB;AAAA,QACtB,wBAAwB,sBAAsB,MAAM;AAAA,MACtD;AAEA,YAAM,mBAAkB,yDAAoB,OACxC,OAAO,yDAAoB,GAAG,IAC9B;AAEJ,UAAI,KAAK,cAAc,UAAU;AAE/B,sBAAc;AAAA,MAChB,OAAO;AAEL,iBAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAC9C,cAAI,KAAK,UAAU,CAAC,EAAE,QAAQ,UAAU;AACtC,2BAAe,cAAc,cAAc,KAAK;AAAA,UAClD,WAAW,KAAK,UAAU,CAAC,EAAE,QAAQ,UAAU;AAC7C,2BAAe,cAAc,cAAc,KAAK;AAAA,UAClD;AAAA,QACF;AAAA,MACF;AAGA,UAAI,cACF,YAAY,eACR,kBAAkB,QAClB,kBAAkB;AAGxB,UACE,YAAY,gBACZ,eAAe,UACf,cAAc,aACd;AACA,sBAAc;AAEd,aAAK,QAAQ,IAAI;AAAA,UACf,wCAAwC,WAAW,kCAAkC,WAAW;AAAA,QAClG;AAAA,MACF;AAEA,UAAI,cAAc,GAAG;AACnB,mBAAK,YAAL,mBAAc;AAAA,UACZ,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,UACpC;AAAA,UACA;AAAA;AAGF,aAAK,QAAQ,IAAI;AAAA,UACf,gCAAgC,KAAK,UAAU,IAAI,KAAK,SAAS,8BAA8B,WAAW;AAAA,QAC5G;AAEA,YAAI,uBAAuB;AACzB,gBAAM,MAAM,QAAS,cAAc,kBAAmB,KAAK,QAAQ,CAAC,CAAC;AAErE,kBAAM,UAAK,YAAL,mBAAc;AAAA,YAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,YACpC,MAAM,MAAQ,MAAM;AAAA,YACpB;AAAA;AAGF,cAAI,cAAc,mBAAmB,EAAC,mDAAiB,MAAK;AAE1D,oBAAM,UAAK,YAAL,mBAAc;AAAA,cAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,cACpC;AAAA,cACA;AAAA;AAAA,UAEJ;AAEA,gBAAM,yBAAyB,QAAM,UAAK,YAAL,mBAAc;AAAA,YACjD,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA;AAGtC,gBAAM,wBAAwB,QAAM,UAAK,YAAL,mBAAc;AAAA,YAChD,KAAK,aAAa,MAAM,KAAK,YAAY;AAAA;AAG3C,cACE,YAAY,iBACZ,iEAAwB,QAAO,QAC/B,0BAA0B,QAC1B;AAEA,kBAAM,WAAW,kBAAkB;AAEnC,kBAAM,uBACJ,WAAW,OAAO,uBAAuB,GAAG;AAE9C,gBAAI,uBAAuB,IAAM;AAC/B,oBAAM,sBAAkB;AAAA,gBACtB,KAAK,MAAM,uBAAuB,EAAE;AAAA,cACtC;AAEA,sBAAM,UAAK,YAAL,mBAAc;AAAA,gBAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,gBACpC;AAAA,gBACA;AAAA;AAAA,YAEJ,OAAO;AACL,sBAAM,UAAK,YAAL,mBAAc;AAAA,gBAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,gBACpC;AAAA,gBACA;AAAA;AAAA,YAEJ;AAAA,UACF,WACE,YAAY,eACZ,yBAAyB,QACzB,yBAAyB,QACzB;AAEA,kBAAM,uBACJ,cAAc,OAAO,sBAAsB,GAAG;AAChD,kBAAM,sBAAkB;AAAA,cACtB,KAAK,MAAM,uBAAuB,EAAE;AAAA,YACtC;AAEA,gBAAI,uBAAuB,IAAM;AAC/B,sBAAM,UAAK,YAAL,mBAAc;AAAA,gBAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,gBACpC;AAAA,gBACA;AAAA;AAAA,YAEJ,OAAO;AACL,sBAAM,UAAK,YAAL,mBAAc;AAAA,gBAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,gBACpC;AAAA,gBACA;AAAA;AAAA,YAEJ;AAAA,UACF;AAAA,QACF;AAAA,MACF,WAAW,eAAe,KAAK,YAAY,cAAc;AACvD,gBAAM,UAAK,YAAL,mBAAc;AAAA,UAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,UACpC;AAAA,UACA;AAAA;AAAA,MAEJ,WAAW,eAAe,KAAK,YAAY,aAAa;AACtD,gBAAM,UAAK,YAAL,mBAAc;AAAA,UAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,UACpC;AAAA,UACA;AAAA;AAIF,cAAM,sBAAsB,KAAK,IAAI,WAAW;AAEhD,YAAI,eAAe,kBAAkB,uBAAuB,aAAa;AACvE,kBAAM,UAAK,YAAL,mBAAc;AAAA,YAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,YACpC,kBAAkB;AAAA,YAClB;AAAA;AAAA,QAEJ;AAAA,MACF;AAAA,IACF;AAv1CF;AAyCI,SAAK,qBAAqB;AAC1B,SAAK,UAAU;AACf,SAAK,aAAa;AAClB,SAAK,YAAY;AAEjB,SAAK,aAAa;AAClB,SAAK,cAAc;AAEnB,SAAK,WAAW,OAAO,WAAW,IAAI,UAAU;AAChD,SAAK,gBAAgB,OAAO,WAAW,IAAI,UAAU;AAGrD,SAAK,sBAAsB;AAG3B,SAAK,qBAAqB;AAG1B,SAAK,kBAAkB;AAGvB,SAAK,QAAQ,WAAW,MAAM;AAC5B,WAAK,2BAA2B;AAAA,IAClC,GAAG,GAAI;AAEP,SAAI,UAAK,uBAAL,mBAAyB,QAAQ;AACnC,WAAK,qBAAqB,aAAa,WAAW;AAAA,IACpD,aAAW,UAAK,uBAAL,mBAAyB,WAAU,OAAO;AACnD,WAAK,qBAAqB,aAAa,cAAc;AAAA,IACvD;AAAA,EACF;AAAA,EAEA,MAAc,wBAAuC;AAzEvD;AA0EI,UAAM,aAAa,KAAK,WAAW;AAAA,MACjC,KAAK,QAAQ;AAAA,MACb;AAAA,IACF;AACA,UAAM,YAAY,KAAK,UAAU,QAAQ,KAAK,QAAQ,iBAAiB,EAAE;AAEzE,SAAK,QAAQ,IAAI;AAAA,MACf,qEAAqE,KAAK,WAAW,KAAK,UAAU,IAAI,SAAS,eAAe,KAAK,UAAU;AAAA,IACjJ;AAGA,YAAM,UAAK,YAAL,mBAAc,aAAa,YAAY;AAAA,MAC3C,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,UACJ,IAAI,GAAG,KAAK,WAAW,KAAK,UAAU;AAAA,UACtC,IAAI,GAAG,KAAK,WAAW,KAAK,UAAU;AAAA,QACxC;AAAA,MACF;AAAA,MACA,QAAQ,CAAC;AAAA,IACX;AAGA,YAAM,UAAK,YAAL,mBAAc,aAAa,aAAa,MAAM,WAAW;AAAA,MAC7D,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,UACJ,IAAI,GAAG,KAAK,UAAU,KAAK,SAAS;AAAA,UACpC,IAAI,GAAG,KAAK,UAAU,KAAK,SAAS;AAAA,QACtC;AAAA,MACF;AAAA,MACA,QAAQ,CAAC;AAAA,IACX;AAGA,YAAM,UAAK,YAAL,mBAAc,aAAa,GAAG,UAAU,IAAI,SAAS,aAAa;AAAA,MACtE,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,QACN;AAAA,MACF;AAAA,MACA,QAAQ,CAAC;AAAA,IACX;AAGA,SAAK,OAAO,QAAQ,OAAO,UAA2B;AAzH1D,UAAAC;AA0HM,cAAMA,MAAA,KAAK,YAAL,gBAAAA,IAAc;AAAA,QAClB,GAAG,UAAU,IAAI,SAAS,IAAI,MAAM,KAAK;AAAA,QACzC;AAAA,UACE,MAAM;AAAA,UACN,QAAQ;AAAA,YACN,MAAM;AAAA,cACJ,IAAI,MAAM;AAAA,cACV,IAAI,MAAM;AAAA,YACZ;AAAA,YACA,MAAM,MAAM;AAAA,YACZ,MAAM,MAAM;AAAA,YACZ,MAAM,MAAM;AAAA,YACZ,MAAM;AAAA,YACN,OAAO;AAAA,YACP,MAAM,MAAM;AAAA,YACZ,QAAQ,MAAM;AAAA,UAChB;AAAA,UACA,QAAQ,CAAC;AAAA,QACX;AAAA;AAAA,IAEJ,CAAC;AAGD,YAAM,UAAK,YAAL,mBAAc,aAAa,GAAG,UAAU,IAAI,SAAS,YAAY;AAAA,MACrE,MAAM;AAAA,MACN,QAAQ;AAAA,QACN,MAAM;AAAA,UACJ,IAAI,+BAAyB;AAAA,UAC7B,IAAI,wBAAwB;AAAA,QAC9B;AAAA,MACF;AAAA,MACA,QAAQ,CAAC;AAAA,IACX;AAEA,SAAK,cAAc,QAAQ,OAAO,UAA2B;AA5JjE,UAAAA,KAAAC;AA6JM,cAAMD,MAAA,KAAK,YAAL,gBAAAA,IAAc;AAAA,QAClB,GAAG,UAAU,IAAI,SAAS,YAAY,MAAM,KAAK;AAAA,QACjD;AAAA,UACE,MAAM;AAAA,UACN,QAAQ;AAAA,YACN,MAAM;AAAA,cACJ,IAAI,MAAM;AAAA,cACV,IAAI,MAAM;AAAA,YACZ;AAAA,YACA,MAAM,MAAM;AAAA,YACZ,MAAM,MAAM;AAAA,YACZ,MAAM,MAAM;AAAA,YACZ,MAAM;AAAA,YACN,OAAO;AAAA,YACP,MAAM,MAAM;AAAA,YACZ,QAAQ,MAAM;AAAA,UAChB;AAAA,UACA,QAAQ,CAAC;AAAA,QACX;AAAA;AAIF,OAAAC,MAAA,KAAK,YAAL,gBAAAA,IAAc;AAAA,QACZ,GAAG,UAAU,IAAI,SAAS,YAAY,MAAM,KAAK;AAAA;AAAA,IAErD,CAAC;AAED,QAAI,KAAK,QAAQ,OAAO,gBAAgB;AAEtC,cAAM,UAAK,YAAL,mBAAc;AAAA,QAClB,GAAG,UAAU,IAAI,SAAS;AAAA,QAC1B;AAAA,UACE,MAAM;AAAA,UACN,QAAQ;AAAA,YACN,MAAM;AAAA,cACJ,IAAI,kCAA4B;AAAA,cAChC,IAAI,6BAA6B;AAAA,YACnC;AAAA,UACF;AAAA,UACA,QAAQ,CAAC;AAAA,QACX;AAAA;AAGF,gBAAM,wDAAwB,KAAK,SAAS,YAAY,SAAS;AAAA,IACnE;AAAA,EACF;AAAA,EAEO,uBAA6B;AA5MtC;AA6MI,UAAM,cAAc,IAAI,KAAK,UAAU,IAAI,KAAK,SAAS;AAEzD,QAAI,KAAK,SAAS;AAChB,WAAK,QAAQ,IAAI;AAAA,QACf,qDAAqD,WAAW;AAAA,MAClE;AACA,iBAAK,QAAQ,eAAb,mBAAyB,UAAU,aAAa;AAAA,IAClD;AAAA,EACF;AAAA,EAEQ,oBAA0B;AAvNpC;AAwNI,UAAM,WAAW,OAAO,KAAK,UAAU,IAAI,KAAK,SAAS;AAEzD,eAAK,YAAL,mBAAc,IAAI;AAAA,MAChB,kDAAkD,QAAQ;AAAA;AAE5D,qBAAK,YAAL,mBAAc,eAAd,mBAA0B,UAAU,UAAU,CAAC,UAAU;AACvD,wDAAoB,OAAO,KAAK,YAAY,KAAK,SAAS;AAAA,IAC5D;AAAA,EACF;AAAA,EAEO,8BAA8B,OAAqB;AAlO5D;AAmOI,eAAK,YAAL,mBAAc,IAAI;AAAA,MAChB,4DAA4D,KAAK;AAAA;AAEnE;AAAA,EACF;AAAA,EAEO,UAAU,QAAsB;AAzOzC;AA0OI,eAAK,YAAL,mBAAc,IAAI;AAAA,MAChB,wCAAwC,MAAM;AAAA;AAEhD;AAAA,EACF;AAAA,EAEO,YAAY,UAAyB;AAhP9C;AAiPI,eAAK,YAAL,mBAAc,IAAI;AAAA,MAChB,0CAA0C,QAAQ;AAAA;AAEpD;AAAA,EACF;AAAA,EAEO,YAAY,UAAyB;AAvP9C;AAwPI,eAAK,YAAL,mBAAc,IAAI;AAAA,MAChB,0CAA0C,QAAQ;AAAA;AAEpD;AAAA,EACF;AAAA,EAEO,YAAY,UAAwB;AA9P7C;AA+PI,QAAI,KAAK,QAAQ,cAAc,KAAK,cAAc,KAAK,WAAW;AAChE,UAAI,YAAY,KAAK,YAAY,GAAG;AAClC,cAAM,QAAQ,OAAO,KAAK,UAAU,IAAI,KAAK,SAAS;AAEtD,cAAM,cAAc,EAAE,YAAY,EAAE,SAAmB,EAAE;AACzD,aAAK,QAAQ,IAAI;AAAA,UACf,iDAAiD,KAAK,SAAS,OAAO,QAAQ;AAAA,QAChF;AACA,mBAAK,QAAQ,eAAb,mBAAyB,QAAQ,OAAO,KAAK,UAAU,WAAW;AAAA,MACpE,OAAO;AACL,aAAK,QAAQ,IAAI,MAAM,wCAAwC;AAAA,MACjE;AAAA,IACF;AAAA,EACF;AAAA,EAEO,YAAY,UAAwB;AA9Q7C;AA+QI,QAAI,KAAK,QAAQ,cAAc,KAAK,cAAc,KAAK,WAAW;AAChE,YAAM,QAAQ,OAAO,KAAK,UAAU,IAAI,KAAK,SAAS;AAEtD,YAAM,qBAAqB,EAAE,YAAY,EAAE,SAAmB,EAAE;AAChE,WAAK,QAAQ,IAAI;AAAA,QACf,4CAA4C,KAAK,SAAS,OAAO,QAAQ;AAAA,MAC3E;AACA,iBAAK,QAAQ,eAAb,mBAAyB;AAAA,QACvB;AAAA,QACA,KAAK,UAAU,kBAAkB;AAAA;AAAA,IAErC;AAAA,EACF;AAAA,EAEO,eAAe,aAA4B;AA7RpD;AA8RI,QAAI,KAAK,QAAQ,cAAc,KAAK,cAAc,KAAK,WAAW;AAChE,YAAM,QAAQ,OAAO,KAAK,UAAU,IAAI,KAAK,SAAS;AAEtD,YAAM,wBAAwB;AAAA,QAC5B,YAAY,EAAE,aAAa,cAAc,IAAI,EAAE;AAAA,MACjD;AACA,WAAK,QAAQ,IAAI;AAAA,QACf,kDAAkD,KAAK,SAAS,OAAO,WAAW;AAAA,MACpF;AACA,iBAAK,QAAQ,eAAb,mBAAyB;AAAA,QACvB;AAAA,QACA,KAAK,UAAU,qBAAqB;AAAA;AAAA,IAExC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,kBAAkB,QAAsB;AAnTjD;AAoTI,QAAI,KAAK,QAAQ,cAAc,KAAK,cAAc,KAAK,WAAW;AAChE,UAAI,UAAU,KAAK,UAAU,IAAI;AAC/B,cAAM,QAAQ,OAAO,KAAK,UAAU,IAAI,KAAK,SAAS;AAEtD,cAAM,cAAc,EAAE,YAAY,EAAE,QAAQ,SAAS,GAAG,EAAE;AAC1D,aAAK,QAAQ,IAAI;AAAA,UACf,8DAA8D,KAAK,SAAS,OAAO,MAAM;AAAA,QAC3F;AACA,mBAAK,QAAQ,eAAb,mBAAyB,QAAQ,OAAO,KAAK,UAAU,WAAW;AAAA,MACpE,OAAO;AACL,aAAK,QAAQ,IAAI;AAAA,UACf;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,eAAe,QAAsB;AA1U9C;AA2UI,QAAI,KAAK,QAAQ,cAAc,KAAK,cAAc,KAAK,WAAW;AAChE,UAAI,UAAU,MAAM,UAAU,KAAK;AACjC,cAAM,cAAc,EAAE,YAAY,EAAE,QAAQ,SAAS,GAAG,EAAE;AAC1D,aAAK,QAAQ,IAAI;AAAA,UACf,uDAAuD,KAAK,SAAS,OAAO,MAAM;AAAA,QACpF;AACA,mBAAK,QAAQ,eAAb,mBAAyB;AAAA,UACvB,KAAK;AAAA,UACL,KAAK,UAAU,WAAW;AAAA;AAAA,MAE9B,OAAO;AACL,aAAK,QAAQ,IAAI;AAAA,UACf;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,aAAa,WAAyB;AAlW/C;AAmWI,QAAI,KAAK,QAAQ,cAAc,KAAK,cAAc,KAAK,WAAW;AAChE,UAAI,sBAA2B,EAAE,YAAY,EAAE,UAAqB,EAAE;AAEtE,cAAQ,WAAW;AAAA,QACjB,KAAK,GAAG;AAEN,gCAAsB;AAAA,YACpB,YAAY;AAAA,cACV,kBAAkB;AAAA,cAClB,gBAAgB;AAAA,gBACd,cAAc;AAAA,gBACd,eAAe;AAAA,gBACf,UAAU;AAAA,cACZ;AAAA,cACA,SAAS;AAAA,cACT,WAAW;AAAA,YACb;AAAA,UACF;AACA;AAAA,QACF;AAAA,QACA,KAAK;AACH,gCAAsB;AAAA,YACpB,YAAY;AAAA,cACV,kBAAkB;AAAA,cAClB,gBAAgB;AAAA,gBACd,cAAc;AAAA,gBACd,eAAe;AAAA,gBACf,UAAU;AAAA,cACZ;AAAA,cACA,SAAS;AAAA,cACT,WAAW;AAAA,YACb;AAAA,UACF;AACA;AAAA,MACJ;AAEA,WAAK,QAAQ,IAAI;AAAA,QACf,mDAAmD,KAAK,SAAS,OAAO,SAAS;AAAA,MACnF;AACA,iBAAK,QAAQ,eAAb,mBAAyB;AAAA,QACvB,KAAK;AAAA,QACL,KAAK,UAAU,mBAAmB;AAAA;AAAA,IAEtC;AAAA,EACF;AAAA,EAEA,MAAa,eAAe,OAA8B;AAjZ5D;AAkZI,QAAI,KAAK,QAAQ,cAAc,KAAK,cAAc,KAAK,WAAW;AAEhE,YAAM,aACJ,WAAM,KAAK,QAAQ;AAAA,QACjB,KAAK,aAAa,MAAM,KAAK,YAAY;AAAA,MAC3C,MAFA,mBAGC;AAEH,UAAI,aAAa,GAAG;AAClB,aAAK,QAAQ,IAAI;AAAA,UACf;AAAA,QACF;AACA;AAAA,MACF;AAEA,UAAI,OAAO;AACT,gBAAQ,KAAK,MAAM,KAAK;AAAA,MAC1B,OAAO;AACL,gBAAQ;AAAA,MACV;AAGA,UAAI,QAAQ,KAAK,gBAAgB;AAC/B,gBAAQ,KAAK;AAAA,MACf;AAEA,UACE,QAAQ,OACR,SAAS,MACT,SAAS,MACT,SAAS,MACT,SAAS,MACR,KAAK,cAAc,YAAY,KAAK,cAAc,WACnD;AAEA,YAAI,QAAQ,OAAO,QAAQ,IAAI;AAC7B,kBAAQ;AAAA,QACV,WAAW,QAAQ,MAAM,QAAQ,IAAI;AACnC,kBAAQ;AAAA,QACV,WAAW,QAAQ,MAAM,QAAQ,IAAI;AACnC,kBAAQ;AAAA,QACV,WAAW,QAAQ,IAAI;AACrB,kBAAQ;AAAA,QACV;AAAA,MACF;AAEA,UAAI,KAAK,QAAQ,OAAO,oBAAoB;AAC1C,cAAM,uBAAuB,MAAM,KAAK,QAAQ;AAAA,UAC9C,KAAK,aAAa,MAAM,KAAK,YAAY;AAAA,QAC3C;AACA,YACE,wBACA,qBAAqB,OACrB,qBAAqB,OAAO,MAC5B;AACA,kBAAQ;AAAA,QACV;AAEA,cAAM,mBAAmB,MAAM,KAAK,QAAQ;AAAA,UAC1C,KAAK,aAAa,MAAM,KAAK,YAAY;AAAA,QAC3C;AAEA,YACE,oBACA,iBAAiB,OACjB,iBAAiB,OAAO,MACxB;AACA,kBAAQ;AAAA,QACV;AAAA,MACF;AAEA,YAAM,gBACJ,WAAM,KAAK,QAAQ;AAAA,QACjB,KAAK,aAAa,MAAM,KAAK,YAAY;AAAA,MAC3C,MAFA,mBAGC;AAEH,UAAI,gBAAgB,QAAQ,gBAAgB,QAAW;AACrD,YAAI,gBAAgB,OAAO;AACzB,gBAAM,cAAc,EAAE,YAAY,EAAE,aAAa,MAAM,EAAE;AAEzD,eAAK,QAAQ,cAAc;AAE3B,gBAAM,YAAY,oBAAI,KAAK;AAC3B,oBAAU,gBAAgB,CAAC;AAE3B,qBAAK,QAAQ,eAAb,mBAAyB;AAAA,YACvB,KAAK;AAAA,YACL,KAAK,UAAU,WAAW;AAAA;AAAA,QAE9B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEO,cAAc,OAAqB;AAjf5C;AAkfI,QAAI,KAAK,QAAQ,cAAc,KAAK,cAAc,KAAK,WAAW;AAChE,UAAI,OAAO;AACT,gBAAQ,KAAK,MAAM,KAAK;AAAA,MAC1B,OAAO;AACL,gBAAQ;AAAA,MACV;AAEA,UAAI,QAAQ,GAAG;AACb,gBAAQ;AAAA,MACV,WAAW,QAAQ,KAAK,SAAS,IAAI;AACnC,gBAAQ;AAAA,MACV,WAAW,QAAQ,CAAC,KAAK,eAAe;AACtC,gBAAQ,CAAC,KAAK;AAAA,MAChB;AAEA,UAAI,KAAK,WAAW,SAAS,QAAQ,GAAG;AAEtC,gBAAQ,KAAK,KAAK,QAAQ,GAAG,IAAI;AAAA,MACnC;AAEA,YAAM,oBAAoB,EAAE,YAAY,EAAE,YAAY,MAAM,EAAE;AAC9D,iBAAK,QAAQ,eAAb,mBAAyB;AAAA,QACvB,KAAK;AAAA,QACL,KAAK,UAAU,iBAAiB;AAAA;AAAA,IAEpC;AAAA,EACF;AAAA,EAEO,aAAa,aAA4B;AA9gBlD;AA+gBI,QAAI,KAAK,QAAQ,cAAc,KAAK,cAAc,KAAK,WAAW;AAChE,YAAM,sBAAsB;AAAA,QAC1B,YAAY,EAAE,WAAW,cAAc,IAAI,EAAE;AAAA,MAC/C;AAEA,WAAK,QAAQ,IAAI;AAAA,QACf,iDAAiD,KAAK,SAAS,OAAO,WAAW;AAAA,MACnF;AACA,iBAAK,QAAQ,eAAb,mBAAyB;AAAA,QACvB,KAAK;AAAA,QACL,KAAK,UAAU,mBAAmB;AAAA;AAAA,IAEtC;AAAA,EACF;AAAA,EAEO,gBAAgB,UAAyB;AA9hBlD;AA+hBI,QAAI,KAAK,QAAQ,cAAc,KAAK,cAAc,KAAK,WAAW;AAChE,YAAM,yBAAyB;AAAA,QAC7B,YAAY,EAAE,cAAc,WAAW,IAAI,EAAE;AAAA,MAC/C;AACA,WAAK,QAAQ,IAAI;AAAA,QACf,6CAA6C,KAAK,SAAS,OAAO,QAAQ;AAAA,MAC5E;AACA,iBAAK,QAAQ,eAAb,mBAAyB;AAAA,QACvB,KAAK;AAAA,QACL,KAAK,UAAU,sBAAsB;AAAA;AAAA,IAEzC;AAAA,EACF;AAAA,EAEO,6BAAmC;AA7iB5C;AA8iBI,QAAI,KAAK,QAAQ,cAAc,KAAK,cAAc,KAAK,WAAW;AAChE,YAAM,QAAQ,OAAO,KAAK,UAAU,IAAI,KAAK,SAAS;AAEtD,YAAM,gBAAgB,EAAE,YAAY,CAAC,QAAQ,EAAE;AAC/C,WAAK,QAAQ,IAAI;AAAA,QACf,gFAAgF,KAAK,SAAS;AAAA,MAChG;AACA,iBAAK,QAAQ,eAAb,mBAAyB,QAAQ,OAAO,KAAK,UAAU,aAAa;AAAA,IACtE;AAAA,EACF;AAAA,EAEA,MAAa,qBACX,OACA,KACe;AA5jBnB;AA6jBI,UAAM,eAAe,MAAM,KAAK,QAAQ;AAAA,MACtC,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS,IAAI,KAAK;AAAA,IAC/C;AAEA,YAAM,UAAK,YAAL,mBAAc;AAAA,MAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS,IAAI,KAAK;AAAA,MAC7C;AAAA,MACA;AAAA;AAGF,SAAI,6CAAc,QAAO,OAAO,SAAS,aAAa;AAEpD,cAAM,UAAK,YAAL,mBAAc;AAAA,QAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,SACpC,oBAAI,KAAK,GAAE,QAAQ;AAAA,QACnB;AAAA;AAIF,YAAM,mBAAmB,MAAM,KAAK,QAAQ;AAAA,QAC1C,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,MACtC;AAEA,UAAI,oBAAoB,iBAAiB,OAAO,gBAAgB;AAC9D,aAAK,qBAAqB,aAAa,WAAW;AAAA,MACpD;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAa,4BACX,OACA,KACe;AA7lBnB;AA+lBI,UAAM,aAAa,QAAM,UAAK,YAAL,mBAAc;AAAA,MACrC,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS,YAAY,KAAK;AAAA;AAIvD,QAAI,YAAY;AACd,cAAM,UAAK,YAAL,mBAAc;AAAA,QAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS,YAAY,KAAK;AAAA,QACrD;AAAA,QACA;AAAA;AAAA,IAEJ;AAAA,EACF;AAAA,EAuWA,MAAa,aAAa,SAAgC;AAl9B5D;AAm9BI,QAAI,UAAU,MAAM;AAClB,UAAI,KAAK,QAAQ,OAAO,gBAAgB;AACtC,aAAK,aAAa;AAAA,MACpB;AAEA,UAAI,KAAK,QAAQ,OAAO,oBAAoB;AAE1C,gBAAM,UAAK,YAAL,mBAAc;AAAA,UAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,UACpC;AAAA,UACA;AAAA;AAIF,cAAM,aACJ,WAAM,KAAK,QAAQ;AAAA,UACjB,KAAK,aAAa,MAAM,KAAK,YAAY;AAAA,QAC3C,MAFA,mBAGC;AACH,YAAI,aAAa,GAAG;AAClB,eAAK,8BAA8B,CAAC;AAAA,QACtC,OAAO;AACL,eAAK,eAAe,CAAC;AAAA,QACvB;AAEA,YAAI,KAAK,QAAQ,OAAO,2BAA2B;AACjD,gBAAM,aAAa,MAAM,KAAK,QAAQ;AAAA,YACpC,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,UACtC;AAEA,cAAI,cAAc,OAAO,WAAW,GAAG,IAAI,IAAI;AAE7C,gBAAI,KAAK,QAAQ,OAAO,oBAAoB;AAC1C,sBAAM,UAAK,YAAL,mBAAc;AAAA,gBAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,gBACpC;AAAA,gBACA;AAAA;AAAA,YAEJ;AAAA,UACF,OAAO;AACL,gBAAI,cAAc,WAAW,KAAK;AAChC,mBAAK,kBAAkB,OAAO,WAAW,GAAG,CAAC;AAAA,YAC/C;AAGA,kBAAM,WAAW,MAAM,KAAK,QAAQ;AAAA,cAClC,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,YACtC;AAEA,gBAAI,CAAC,YAAY,OAAO,SAAS,GAAG,KAAK,GAAG;AAC1C,mBAAK,QAAQ,IAAI;AAAA,gBACf;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF,WAAW,WAAW,MAAM;AAE1B,YAAM,kBAAkB,MAAM,KAAK,QAAQ;AAAA,QACzC,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,MACtC;AAEA,UAAI,mBAAmB,gBAAgB,OAAO,MAAM;AAClD,gBAAM,UAAK,YAAL,mBAAc;AAAA,UAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,UACpC;AAAA,UACA;AAAA;AAGF,YACE,KAAK,QAAQ,OAAO,sBACpB,KAAK,QAAQ,OAAO,2BACpB;AACA,eAAK;AAAA,YACH,KAAK,QAAQ,OAAO,iBAChB,KAAK,QAAQ,OAAO,iBACpB;AAAA,UACN;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASO,kBAAwB;AAC7B,0CAAqB,QAAQ,OAAO,aAAa;AA/iCrD;AAgjCM,UAAI,oBAAoB;AACxB,UAAI,qBAAqB;AACzB,UAAI,iBAAiB;AAErB,UAAI,YAAY,YAAY;AAC1B,4BAAoB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AACxD,6BAAqB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AACzD,yBAAiB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,MACvD,WAAW,YAAY,YAAY;AACjC,4BAAoB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AACxD,6BAAqB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AACzD,yBAAiB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,MACvD,OAAO;AACL,4BAAoB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS,iBAAiB,QAAQ;AACjF,6BAAqB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS,iBAAiB,QAAQ;AAClF,yBAAiB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS,IAAI,QAAQ;AAAA,MACnE;AAEA,YAAM,oBACJ,QAAM,UAAK,YAAL,mBAAc,cAAc;AACpC,YAAM,qBACJ,QAAM,UAAK,YAAL,mBAAc,cAAc;AAEpC,WAAI,yDAAoB,QAAO,GAAG;AAEhC,gBAAM,UAAK,YAAL,mBAAc,SAAS,mBAAmB,MAAU;AAAA,MAC5D,WACE,sBACA,mBAAmB,MACnB,qBACA,kBAAkB,OAAO,UACzB,kBAAkB,OAAO,MACzB;AAEA,cAAM,YAAY;AAGlB,cAAM,iBACH,OAAO,kBAAkB,GAAG,IAAI,YAAa;AAgBhD,YAAI,iBAAiB,OAAO,mBAAmB,GAAG,IAAI;AAGtD,YAAI,iBAAiB,GAAG;AACtB,2BAAiB;AAAA,QACnB;AAEA,gBAAM,UAAK,YAAL,mBAAc,SAAS,mBAAmB,gBAAgB;AAChE,gBAAM,UAAK,YAAL,mBAAc;AAAA,UAClB;AAAA,UACA,QAAQ,iBAAiB,KAAM,QAAQ,CAAC,CAAC;AAAA,UACzC;AAAA;AAIF,aACG,YAAY,gBAAgB,YAAY,gBACzC,iBAAiB,GACjB;AACA,gBAAM,KAAK,sBAAsB,UAAU,cAAc;AAAA,QAC3D,OAAO;AACL,cAAI,YAAY,cAAc;AAC5B,oBAAM,UAAK,YAAL,mBAAc;AAAA,cAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,cACpC;AAAA,cACA;AAAA;AAAA,UAEJ,WAAW,YAAY,aAAa;AAClC,oBAAM,UAAK,YAAL,mBAAc;AAAA,cAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,cACpC;AAAA,cACA;AAAA;AAAA,UAEJ;AAAA,QACF;AAAA,MACF,OAAO;AACL,gBAAM,UAAK,YAAL,mBAAc,SAAS,mBAAmB,GAAG;AACnD,gBAAM,UAAK,YAAL,mBAAc,SAAS,oBAAoB,GAAG;AAAA,MACtD;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EA2MA,MAAa,eAA8B;AAz1C7C;AA21CI,YAAM,UAAK,YAAL,mBAAc;AAAA,MAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,MACpC;AAAA,MACA;AAAA;AAIF,UAAM,gBAAgB,MAAM,KAAK,QAAQ;AAAA,MACvC,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,IACtC;AACA,UAAM,mBAAmB,MAAM,KAAK,QAAQ;AAAA,MAC1C,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,IACtC;AAEA,UAAM,SAAS,OAAO,qDAAkB,GAAG,IAAI,OAAO,+CAAe,GAAG;AAGxE,YAAM,UAAK,YAAL,mBAAc;AAAA,MAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,MACpC;AAAA,MACA;AAAA;AAIF,YAAM,UAAK,YAAL,mBAAc;AAAA,MAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,MACpC;AAAA,MACA;AAAA;AAAA,EAEJ;AAAA,EAEA,MAAa,iBAAgC;AA13C/C;AA23CI,UAAM,qBAAqB,QAAM,UAAK,YAAL,mBAAc;AAAA,MAC7C,KAAK,aAAa,MAAM,KAAK,YAAY;AAAA;AAG3C,QAAI,oBAAoB;AACtB,cAAM,UAAK,YAAL,mBAAc;AAAA,QAClB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,QACpC,yDAAoB;AAAA,QACpB;AAAA;AAAA,IAEJ;AAAA,EACF;AAAA,EAEO,uBAA6B;AAClC,0CAAqB,QAAQ,OAAO,aAAqB;AAz4C7D;AA04CM,UAAI,oBAAoB;AACxB,UAAI,qBAAqB;AAEzB,UAAI,YAAY,YAAY;AAC1B,4BAAoB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AACxD,6BAAqB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,MAC3D,WAAW,YAAY,YAAY;AACjC,4BAAoB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AACxD,6BAAqB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS;AAAA,MAC3D,OAAO;AACL,4BAAoB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS,iBAAiB,QAAQ;AACjF,6BAAqB,GAAG,KAAK,UAAU,IAAI,KAAK,SAAS,iBAAiB,QAAQ;AAAA,MACpF;AAEA,cAAM,UAAK,YAAL,mBAAc,SAAS,mBAAmB,GAAG;AACnD,cAAM,UAAK,YAAL,mBAAc,SAAS,oBAAoB,GAAG;AAAA,IACtD,CAAC;AAAA,EACH;AACF;",
  "names": ["key", "_a", "_b"]
}
