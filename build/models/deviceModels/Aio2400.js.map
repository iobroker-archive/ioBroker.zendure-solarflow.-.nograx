{
  "version": 3,
  "sources": ["../../../src/models/deviceModels/Aio2400.ts"],
  "sourcesContent": ["import { aioControlStates } from \"../../constants/aioControlStates\";\r\nimport { aioStates } from \"../../constants/aioStates\";\r\nimport { ZendureSolarflow } from \"../../main\";\r\nimport { IDeviceAutomationPayload } from \"../IDeviceAutomationPayload\";\r\nimport { IZenHaDeviceDetails } from \"../IZenHaDeviceDetails\";\r\nimport { ZenHaDevice } from \"./ZenHaDevice\";\r\n\r\nexport class Aio2400 extends ZenHaDevice {\r\n  maxInputLimit = 0;\r\n  maxOutputLimit = 1200;\r\n\r\n  states = aioStates;\r\n  controlStates = aioControlStates;\r\n\r\n  public constructor(\r\n    _adapter: ZendureSolarflow,\r\n    _productKey: string,\r\n    _deviceKey: string,\r\n    _productName: string,\r\n    _deviceName: string,\r\n    _zenHaDeviceDetails?: IZenHaDeviceDetails\r\n  ) {\r\n    super(\r\n      _adapter,\r\n      _productKey,\r\n      _deviceKey,\r\n      _productName,\r\n      _deviceName,\r\n      _zenHaDeviceDetails\r\n    );\r\n  }\r\n\r\n  public async setDeviceAutomationInOutLimit(\r\n    limit: number // can be negative, negative will trigger charging mode\r\n  ): Promise<void> {\r\n    if (this.adapter.mqttClient && this.productKey && this.deviceKey) {\r\n      this.adapter.log.debug(\r\n        `[setDeviceAutomationInOutLimit] Set device Automation limit to ${limit}!`\r\n      );\r\n\r\n      if (limit) {\r\n        limit = Math.round(limit);\r\n      } else {\r\n        limit = 0;\r\n      }\r\n\r\n      if (this.adapter.config.useLowVoltageBlock) {\r\n        const lowVoltageBlockState = await this.adapter.getStateAsync(\r\n          this.productKey + \".\" + this.deviceKey + \".control.lowVoltageBlock\"\r\n        );\r\n        if (\r\n          lowVoltageBlockState &&\r\n          lowVoltageBlockState.val &&\r\n          lowVoltageBlockState.val == true &&\r\n          limit > 0\r\n        ) {\r\n          limit = 0;\r\n        }\r\n\r\n        const fullChargeNeeded = await this.adapter.getStateAsync(\r\n          this.productKey + \".\" + this.deviceKey + \".control.fullChargeNeeded\"\r\n        );\r\n\r\n        if (\r\n          fullChargeNeeded &&\r\n          fullChargeNeeded.val &&\r\n          fullChargeNeeded.val == true &&\r\n          limit > 0\r\n        ) {\r\n          limit = 0;\r\n        }\r\n      }\r\n\r\n      if (limit < 0) {\r\n        this.adapter.log.debug(\r\n          `[setDeviceAutomationInOutLimit] AIO 2400 can not charge by AC!`\r\n        );\r\n        return;\r\n      } else {\r\n        if (limit > this.maxOutputLimit) {\r\n          limit = this.maxOutputLimit;\r\n        }\r\n      }\r\n\r\n      if (\r\n        limit < 100 &&\r\n        limit != 90 &&\r\n        limit != 60 &&\r\n        limit != 30 &&\r\n        limit != 0\r\n      ) {\r\n        // NUR Solarflow HUB: Das Limit kann unter 100 nur in 30er Schritten gesetzt werden, dH. 30/60/90/100, wir rechnen das also um\r\n        if (limit < 100 && limit > 90) {\r\n          limit = 90;\r\n        } else if (limit > 60 && limit < 90) {\r\n          limit = 60;\r\n        } else if (limit > 30 && limit < 60) {\r\n          limit = 30;\r\n        } else if (limit < 30) {\r\n          limit = 30;\r\n        }\r\n      }\r\n\r\n      this.adapter.msgCounter += 1;\r\n\r\n      const timestamp = new Date();\r\n      timestamp.setMilliseconds(0);\r\n\r\n      let _arguments: IDeviceAutomationPayload[] = [];\r\n\r\n      // Output\r\n      this.adapter.log.debug(\r\n        `[setDeviceAutomationInOutLimit] Using FEED IN variant of AIO device automation, as device '${this.productKey}' detected and limit is positive!`\r\n      );\r\n      _arguments = [\r\n        {\r\n          autoModelProgram: 2,\r\n          autoModelValue: limit,\r\n          msgType: 1,\r\n          autoModel: 8,\r\n        },\r\n      ];\r\n\r\n      const deviceAutomation = {\r\n        arguments: _arguments,\r\n        function: \"deviceAutomation\",\r\n        messageId: this.adapter.msgCounter,\r\n        deviceKey: this.deviceKey,\r\n        timestamp: timestamp.getTime() / 1000,\r\n      };\r\n      this.adapter.mqttClient?.publish(\r\n        this.functionTopic,\r\n        JSON.stringify(deviceAutomation)\r\n      );\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAiC;AACjC,uBAA0B;AAI1B,yBAA4B;AAErB,MAAM,gBAAgB,+BAAY;AAAA,EAOhC,YACL,UACA,aACA,YACA,cACA,aACA,qBACA;AACA;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AArBF,yBAAgB;AAChB,0BAAiB;AAEjB,kBAAS;AACT,yBAAgB;AAAA,EAkBhB;AAAA,EAEA,MAAa,8BACX,OACe;AAlCnB;AAmCI,QAAI,KAAK,QAAQ,cAAc,KAAK,cAAc,KAAK,WAAW;AAChE,WAAK,QAAQ,IAAI;AAAA,QACf,kEAAkE,KAAK;AAAA,MACzE;AAEA,UAAI,OAAO;AACT,gBAAQ,KAAK,MAAM,KAAK;AAAA,MAC1B,OAAO;AACL,gBAAQ;AAAA,MACV;AAEA,UAAI,KAAK,QAAQ,OAAO,oBAAoB;AAC1C,cAAM,uBAAuB,MAAM,KAAK,QAAQ;AAAA,UAC9C,KAAK,aAAa,MAAM,KAAK,YAAY;AAAA,QAC3C;AACA,YACE,wBACA,qBAAqB,OACrB,qBAAqB,OAAO,QAC5B,QAAQ,GACR;AACA,kBAAQ;AAAA,QACV;AAEA,cAAM,mBAAmB,MAAM,KAAK,QAAQ;AAAA,UAC1C,KAAK,aAAa,MAAM,KAAK,YAAY;AAAA,QAC3C;AAEA,YACE,oBACA,iBAAiB,OACjB,iBAAiB,OAAO,QACxB,QAAQ,GACR;AACA,kBAAQ;AAAA,QACV;AAAA,MACF;AAEA,UAAI,QAAQ,GAAG;AACb,aAAK,QAAQ,IAAI;AAAA,UACf;AAAA,QACF;AACA;AAAA,MACF,OAAO;AACL,YAAI,QAAQ,KAAK,gBAAgB;AAC/B,kBAAQ,KAAK;AAAA,QACf;AAAA,MACF;AAEA,UACE,QAAQ,OACR,SAAS,MACT,SAAS,MACT,SAAS,MACT,SAAS,GACT;AAEA,YAAI,QAAQ,OAAO,QAAQ,IAAI;AAC7B,kBAAQ;AAAA,QACV,WAAW,QAAQ,MAAM,QAAQ,IAAI;AACnC,kBAAQ;AAAA,QACV,WAAW,QAAQ,MAAM,QAAQ,IAAI;AACnC,kBAAQ;AAAA,QACV,WAAW,QAAQ,IAAI;AACrB,kBAAQ;AAAA,QACV;AAAA,MACF;AAEA,WAAK,QAAQ,cAAc;AAE3B,YAAM,YAAY,oBAAI,KAAK;AAC3B,gBAAU,gBAAgB,CAAC;AAE3B,UAAI,aAAyC,CAAC;AAG9C,WAAK,QAAQ,IAAI;AAAA,QACf,8FAA8F,KAAK,UAAU;AAAA,MAC/G;AACA,mBAAa;AAAA,QACX;AAAA,UACE,kBAAkB;AAAA,UAClB,gBAAgB;AAAA,UAChB,SAAS;AAAA,UACT,WAAW;AAAA,QACb;AAAA,MACF;AAEA,YAAM,mBAAmB;AAAA,QACvB,WAAW;AAAA,QACX,UAAU;AAAA,QACV,WAAW,KAAK,QAAQ;AAAA,QACxB,WAAW,KAAK;AAAA,QAChB,WAAW,UAAU,QAAQ,IAAI;AAAA,MACnC;AACA,iBAAK,QAAQ,eAAb,mBAAyB;AAAA,QACvB,KAAK;AAAA,QACL,KAAK,UAAU,gBAAgB;AAAA;AAAA,IAEnC;AAAA,EACF;AACF;",
  "names": []
}
