{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\n/*\r\n * Created with @iobroker/create-adapter v2.5.0\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from \"@iobroker/adapter-core\";\r\nimport {\r\n  connectCloudMqttClient,\r\n  connectLocalMqttClient,\r\n  setAcMode,\r\n  setAcSwitch,\r\n  setAutoModel,\r\n  setAutoRecover,\r\n  setBuzzerSwitch,\r\n  setChargeLimit,\r\n  setDcSwitch,\r\n  setDeviceAutomationLimit,\r\n  setDischargeLimit,\r\n  setHubState,\r\n  setInputLimit,\r\n  setOutputLimit,\r\n  setPassMode,\r\n  setSmartMode,\r\n} from \"./services/mqttService\";\r\nimport { getDeviceList, login } from \"./services/webService\";\r\nimport { ISolarFlowDeviceDetails } from \"./models/ISolarFlowDeviceDetails\";\r\nimport { ISolarFlowPaths } from \"./models/ISolarFlowPaths\";\r\nimport { pathsEu, pathsGlobal } from \"./constants/paths\";\r\nimport { Job } from \"node-schedule\";\r\nimport { MqttClient } from \"mqtt\";\r\nimport {\r\n  checkDevicesServer,\r\n  updateSolarFlowState,\r\n} from \"./services/adapterService\";\r\nimport { createSolarFlowStates } from \"./helpers/createSolarFlowStates\";\r\nimport { createDeveloperAccount } from \"./services/fallbackWebService\";\r\nimport { ISolarFlowDevRegisterData } from \"./models/ISolarflowDevRegisterResponse\";\r\nimport { connectFallbackMqttClient } from \"./services/fallbackMqttService\";\r\nimport { IPack2Device } from \"./models/IPack2Device\";\r\nimport { startRefreshAccessTokenTimerJob } from \"./services/jobSchedule\";\r\n\r\nexport class ZendureSolarflow extends utils.Adapter {\r\n  public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n    super({\r\n      ...options,\r\n      name: \"zendure-solarflow\",\r\n    });\r\n    this.on(\"ready\", this.onReady.bind(this));\r\n    this.on(\"stateChange\", this.onStateChange.bind(this));\r\n    this.on(\"unload\", this.onUnload.bind(this));\r\n  }\r\n\r\n  public userId: string | undefined = undefined; // User ID, needed for connection with Smart Plug\r\n  public accessToken: string | undefined = undefined; // Access Token for Zendure Rest API\r\n  public deviceList: ISolarFlowDeviceDetails[] = [];\r\n  public paths: ISolarFlowPaths | undefined = undefined;\r\n  public pack2Devices: IPack2Device[] = [];\r\n\r\n  public msgCounter: number = 700000;\r\n\r\n  public lastLogin: Date | undefined = undefined;\r\n\r\n  public mqttClient: MqttClient | undefined = undefined;\r\n\r\n  public resetValuesJob: Job | undefined = undefined;\r\n  public checkStatesJob: Job | undefined = undefined;\r\n  public calculationJob: Job | undefined = undefined;\r\n  public refreshAccessTokenInterval: ioBroker.Interval | undefined = undefined;\r\n  public retryTimeout: ioBroker.Timeout | undefined = undefined;\r\n\r\n  public createdSnNumberSolarflowStates: string[] = [];\r\n\r\n  /**\r\n   * Is called when databases are connected and adapter received configuration.\r\n   */\r\n  private async onReady(): Promise<void> {\r\n    await this.extendObject(\"info\", {\r\n      type: \"channel\",\r\n      common: {\r\n        name: \"Information\",\r\n      },\r\n      native: {},\r\n    });\r\n\r\n    await this.extendObject(`info.connection`, {\r\n      type: \"state\",\r\n      common: {\r\n        name: {\r\n          de: \"Mit Zendure Cloud verbunden\",\r\n          en: \"Connected to Zendure cloud\",\r\n        },\r\n        type: \"boolean\",\r\n        desc: \"connection\",\r\n        role: \"indicator.connected\",\r\n        read: true,\r\n        write: false,\r\n      },\r\n      native: {},\r\n    });\r\n\r\n    await this.extendObject(`info.errorMessage`, {\r\n      type: \"state\",\r\n      common: {\r\n        name: {\r\n          de: \"Fehlermeldung der Verbindung zur Zendure Cloud\",\r\n          en: \"Error message from Zendure Cloud\",\r\n        },\r\n        type: \"string\",\r\n        desc: \"errorMessage\",\r\n        role: \"value\",\r\n        read: true,\r\n        write: false,\r\n      },\r\n      native: {},\r\n    });\r\n\r\n    // Select paths by config value\r\n    if (this.config.server && this.config.server == \"eu\") {\r\n      this.paths = pathsEu;\r\n    } else {\r\n      this.paths = pathsGlobal;\r\n    }\r\n\r\n    this.log.debug(\"[onReady] Using server \" + this.config.server);\r\n\r\n    this.setState(\"info.errorMessage\", \"\", true);\r\n\r\n    if (this.config.server == \"local\") {\r\n      this.log.debug(\"[onReady] Using local MQTT server\");\r\n\r\n      connectLocalMqttClient(this);\r\n\r\n      if (this.config.useRestart) {\r\n        // Add interval to restart adapter every 3 hours\r\n        startRefreshAccessTokenTimerJob(this);\r\n      }\r\n    } else if (this.config.useFallbackService && this.config.snNumber) {\r\n      this.log.debug(\"[onReady] Using Fallback Mode (Dev-Server)\");\r\n      // Use Fallback service. Using the developer version of the MQTT and Webservice from zendure\r\n      createDeveloperAccount(this).then((data: ISolarFlowDevRegisterData) => {\r\n        //console.log(data);\r\n        if (data.appKey && data.mqttUrl && data.port && data.secret) {\r\n          connectFallbackMqttClient(\r\n            this,\r\n            data.appKey,\r\n            data.secret,\r\n            data.mqttUrl,\r\n            data.port\r\n          );\r\n        }\r\n      });\r\n    } else if (\r\n      !this.config.useFallbackService &&\r\n      this.config.userName &&\r\n      this.config.password\r\n    ) {\r\n      // App mode: If Username and Password is provided, try to login and get the access token.\r\n      let _accessToken: string | undefined = undefined;\r\n      let retryCounter = 0;\r\n\r\n      if (this.config.useRestart) {\r\n        // Add interval to restart adapter every 3 hours\r\n        startRefreshAccessTokenTimerJob(this);\r\n      }\r\n\r\n      while (retryCounter <= 10) {\r\n        try {\r\n          _accessToken = await login(this);\r\n        } catch (ex: any) {\r\n          this.setState(\"info.message\", ex.message, true);\r\n          if (ex.message.includes(\"Request failed with status code 400\")) {\r\n            this.log.warn(\r\n              `[onReady] Error 400, maybe your credentials are invalid!`\r\n            );\r\n            break;\r\n          } else {\r\n            this.log.error(\r\n              `[onReady] Error connecting to Zendure Cloud. Error: ${ex.message}`\r\n            );\r\n          }\r\n        }\r\n\r\n        if (_accessToken != undefined) {\r\n          this.accessToken = _accessToken;\r\n          break;\r\n        }\r\n\r\n        retryCounter++;\r\n\r\n        const milliseconds = 4000 * retryCounter;\r\n\r\n        this.log.warn(\r\n          `[onReady] Retrying to connect to Zendure Cloud in ${milliseconds / 1000} seconds (Retry #${retryCounter} of 10).`\r\n        );\r\n\r\n        // Add a small sleep\r\n        await new Promise(\r\n          (r) =>\r\n            (this.retryTimeout = this.setTimeout(r, milliseconds, undefined))\r\n        );\r\n      }\r\n\r\n      if (_accessToken != undefined) {\r\n        this.setState(\"info.connection\", true, true);\r\n        this.lastLogin = new Date();\r\n\r\n        // Try to get the device list\r\n        getDeviceList(this)\r\n          .then(async (result: ISolarFlowDeviceDetails[]) => {\r\n            if (result) {\r\n              // Device List found. Save in the adapter properties and connect to MQTT\r\n\r\n              // Filtering to SolarFlow devices\r\n              this.deviceList = result.filter(\r\n                (device) =>\r\n                  device.productName.toLowerCase().includes(\"solarflow\") ||\r\n                  device.productName.toLowerCase().includes(\"hyper\") ||\r\n                  device.productName.toLowerCase() == \"ace 1500\" ||\r\n                  device.productName.toLowerCase().includes(\"smart plug\")\r\n              );\r\n\r\n              await checkDevicesServer(this);\r\n\r\n              this.log.info(\r\n                `[onReady] Found ${this.deviceList.length} SolarFlow device(s).`\r\n              );\r\n\r\n              await this.deviceList.forEach(\r\n                async (device: ISolarFlowDeviceDetails) => {\r\n                  // Check if has subdevice e.g. ACE?\r\n                  if (device.packList && device.packList.length > 0) {\r\n                    device.packList.forEach(async (subDevice) => {\r\n                      if (\r\n                        subDevice.productName.toLocaleLowerCase() == \"ace 1500\"\r\n                      ) {\r\n                        device._connectedWithAce = true;\r\n                        // States erstellen\r\n                        await createSolarFlowStates(this, subDevice);\r\n\r\n                        await updateSolarFlowState(\r\n                          this,\r\n                          subDevice.productKey,\r\n                          subDevice.deviceKey,\r\n                          \"registeredServer\",\r\n                          this.config.server\r\n                        );\r\n                      }\r\n                    });\r\n                  }\r\n\r\n                  // States erstellen\r\n                  await createSolarFlowStates(this, device);\r\n\r\n                  if (\r\n                    !device.productName.toLowerCase().includes(\"smart plug\")\r\n                  ) {\r\n                    await updateSolarFlowState(\r\n                      this,\r\n                      device.productKey,\r\n                      device.deviceKey,\r\n                      \"registeredServer\",\r\n                      this.config.server\r\n                    );\r\n                  } else if (this?.userId && device.id) {\r\n                    await updateSolarFlowState(\r\n                      this,\r\n                      this.userId,\r\n                      device.id?.toString(),\r\n                      \"registeredServer\",\r\n                      this.config.server\r\n                    );\r\n                  }\r\n                }\r\n              );\r\n\r\n              connectCloudMqttClient(this);\r\n            }\r\n          })\r\n          .catch(() => {\r\n            this.setState(\"info.connection\", false, true);\r\n            this.log?.error(\"[onReady] Retrieving device failed!\");\r\n          });\r\n      }\r\n    } else {\r\n      this.setState(\"info.connection\", false, true);\r\n      this.log.error(\"[onReady] No Login Information provided!\");\r\n      //this.stop?.();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n   */\r\n  private async onUnload(callback: () => void): Promise<void> {\r\n    try {\r\n      if (this.refreshAccessTokenInterval) {\r\n        this.clearInterval(this.refreshAccessTokenInterval);\r\n      }\r\n\r\n      try {\r\n        await this.mqttClient?.endAsync();\r\n        this.log.info(\"[onUnload] MQTT client stopped!\");\r\n        this.mqttClient = undefined;\r\n      } catch (ex: any) {\r\n        this.log.error(\"[onUnload] Error stopping MQTT client: !\" + ex.message);\r\n      }\r\n\r\n      this.setState(\"info.connection\", false, true);\r\n\r\n      // Scheduler beenden\r\n      if (this.resetValuesJob) {\r\n        this.resetValuesJob.cancel();\r\n        this.resetValuesJob = undefined;\r\n      }\r\n\r\n      if (this.checkStatesJob) {\r\n        this.checkStatesJob?.cancel();\r\n        this.checkStatesJob = undefined;\r\n      }\r\n\r\n      if (this.calculationJob) {\r\n        this.calculationJob.cancel();\r\n        this.calculationJob = undefined;\r\n      }\r\n\r\n      if (this.retryTimeout) {\r\n        this.clearTimeout(this.retryTimeout);\r\n      }\r\n\r\n      callback();\r\n    } catch (e) {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Is called if a subscribed state changes\r\n   */\r\n  private onStateChange(\r\n    id: string,\r\n    state: ioBroker.State | null | undefined\r\n  ): void {\r\n    if (state) {\r\n      // The state was changed\r\n      //this.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n\r\n      // Read product and device key from string\r\n      const splitted = id.split(\".\");\r\n      const productKey = splitted[2]; // Product Key\r\n      const deviceKey = splitted[3]; // Device Key\r\n      const stateName1 = splitted[4]; // Folder/State Name 1 (e.g. 'control')\r\n      const stateName2 = splitted[5]; // State Name, like 'setOutputLimit'\r\n\r\n      if (this.config.useFallbackService && stateName1 == \"control\") {\r\n        this.log.warn(\r\n          `[onStateChange] Using Fallback server, control of Solarflow device is not possible!`\r\n        );\r\n      }\r\n      // !!! Only stateChanges with ack==false are allowed to be processed.\r\n      else if (state.val != undefined && state.val != null && !state.ack) {\r\n        switch (stateName1) {\r\n          case \"control\":\r\n            switch (stateName2) {\r\n              case \"setOutputLimit\":\r\n                setOutputLimit(this, productKey, deviceKey, Number(state.val));\r\n                break;\r\n              case \"setInputLimit\":\r\n                setInputLimit(this, productKey, deviceKey, Number(state.val));\r\n                break;\r\n              case \"chargeLimit\":\r\n                setChargeLimit(this, productKey, deviceKey, Number(state.val));\r\n                break;\r\n              case \"dischargeLimit\":\r\n                setDischargeLimit(\r\n                  this,\r\n                  productKey,\r\n                  deviceKey,\r\n                  Number(state.val)\r\n                );\r\n                break;\r\n              case \"passMode\":\r\n                setPassMode(this, productKey, deviceKey, Number(state.val));\r\n                break;\r\n              case \"dcSwitch\":\r\n                setDcSwitch(\r\n                  this,\r\n                  productKey,\r\n                  deviceKey,\r\n                  state.val ? true : false\r\n                );\r\n                break;\r\n              case \"acSwitch\":\r\n                setAcSwitch(\r\n                  this,\r\n                  productKey,\r\n                  deviceKey,\r\n                  state.val ? true : false\r\n                );\r\n                break;\r\n              case \"acMode\":\r\n                setAcMode(this, productKey, deviceKey, Number(state.val));\r\n                break;\r\n              case \"hubState\":\r\n                setHubState(this, productKey, deviceKey, Number(state.val));\r\n                break;\r\n              case \"autoModel\":\r\n                setAutoModel(this, productKey, deviceKey, Number(state.val));\r\n                break;\r\n              case \"autoRecover\":\r\n                setAutoRecover(\r\n                  this,\r\n                  productKey,\r\n                  deviceKey,\r\n                  state.val ? true : false\r\n                );\r\n                break;\r\n              case \"buzzerSwitch\":\r\n                setBuzzerSwitch(\r\n                  this,\r\n                  productKey,\r\n                  deviceKey,\r\n                  state.val ? true : false\r\n                );\r\n                break;\r\n              case \"smartMode\":\r\n                setSmartMode(\r\n                  this,\r\n                  productKey,\r\n                  deviceKey,\r\n                  state.val ? true : false\r\n                );\r\n                break;\r\n              case \"setDeviceAutomationLimit\":\r\n                setDeviceAutomationLimit(\r\n                  this,\r\n                  productKey,\r\n                  deviceKey,\r\n                  Number(state.val)\r\n                );\r\n                break;\r\n            }\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      } else {\r\n        // The state was deleted\r\n        //this.log.debug(`state ${id} deleted`);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nif (require.main !== module) {\r\n  // Export the constructor in compact mode\r\n  module.exports = (options: Partial<utils.AdapterOptions> | undefined) =>\r\n    new ZendureSolarflow(options);\r\n} else {\r\n  // otherwise start the instance directly\r\n  (() => new ZendureSolarflow())();\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
