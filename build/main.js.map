{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/indent */\r\n/*\r\n * Created with @iobroker/create-adapter v2.5.0\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from \"@iobroker/adapter-core\";\r\n\r\nimport { zenLogin } from \"./services/zenWebService\";\r\nimport { Job } from \"node-schedule\";\r\nimport { MqttClient } from \"mqtt\";\r\nimport { startRefreshAccessTokenTimerJob } from \"./services/jobSchedule\";\r\nimport { connectLocalMqttClient } from \"./services/mqttLocalService\";\r\nimport { IZenHaDeviceDetails } from \"./models/IZenHaDeviceDetails\";\r\nimport { connectCloudZenMqttClient } from \"./services/mqttCloudZenService\";\r\nimport { IZenHaMqttData } from \"./models/IZenHaMqttData\";\r\nimport { ZenHaDevice } from \"./models/deviceModels/ZenHaDevice\";\r\nimport { createDeviceModel } from \"./helpers/helpers\";\r\n\r\nexport class ZendureSolarflow extends utils.Adapter {\r\n  public constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n    super({\r\n      ...options,\r\n      name: \"zendure-solarflow\",\r\n    });\r\n    this.on(\"ready\", this.onReady.bind(this));\r\n    this.on(\"stateChange\", this.onStateChange.bind(this));\r\n    this.on(\"unload\", this.onUnload.bind(this));\r\n  }\r\n\r\n  public zenHaDeviceList: ZenHaDevice[] = []; // All found devices for this instance will be in this array\r\n  public mqttSettings: IZenHaMqttData | undefined = undefined;\r\n\r\n  public msgCounter: number = 700000;\r\n  public lastLogin: Date | undefined = undefined;\r\n\r\n  public mqttClient: MqttClient | undefined = undefined;\r\n\r\n  public resetValuesJob: Job | undefined = undefined;\r\n  public checkStatesJob: Job | undefined = undefined;\r\n  public calculationJob: Job | undefined = undefined;\r\n  public refreshAccessTokenInterval: ioBroker.Interval | undefined = undefined;\r\n  public retryTimeout: ioBroker.Timeout | undefined = undefined;\r\n\r\n  /**\r\n   * Is called when databases are connected and adapter received configuration.\r\n   */\r\n  private async onReady(): Promise<void> {\r\n    await this.extendObject(\"info\", {\r\n      type: \"channel\",\r\n      common: {\r\n        name: \"Information\",\r\n      },\r\n      native: {},\r\n    });\r\n\r\n    await this.extendObject(`info.connection`, {\r\n      type: \"state\",\r\n      common: {\r\n        name: {\r\n          de: \"Mit Zendure Cloud verbunden\",\r\n          en: \"Connected to Zendure cloud\",\r\n        },\r\n        type: \"boolean\",\r\n        desc: \"connection\",\r\n        role: \"indicator.connected\",\r\n        read: true,\r\n        write: false,\r\n      },\r\n      native: {},\r\n    });\r\n\r\n    await this.extendObject(`info.errorMessage`, {\r\n      type: \"state\",\r\n      common: {\r\n        name: {\r\n          de: \"Fehlermeldung der Verbindung zur Zendure Cloud\",\r\n          en: \"Error message from Zendure Cloud\",\r\n        },\r\n        type: \"string\",\r\n        desc: \"errorMessage\",\r\n        role: \"value\",\r\n        read: true,\r\n        write: false,\r\n      },\r\n      native: {},\r\n    });\r\n\r\n    this.setState(\"info.errorMessage\", \"\", true);\r\n    this.setState(\"info.connection\", false, true);\r\n\r\n    switch (this.config.connectionMode) {\r\n      case \"authKey\":\r\n        this.log.debug(\"[onReady] Using Authorization Cloud Key\");\r\n\r\n        if (!this.config.authorizationCloudKey) {\r\n          this.log.error(\r\n            \"[zenWebService.login] authorization cloud key is missing!\"\r\n          );\r\n          break;\r\n        }\r\n\r\n        const data = await zenLogin(this);\r\n\r\n        if (typeof data === \"string\" || data == undefined) {\r\n          // Fehler\r\n          this.setState(\"info.connection\", false, true);\r\n        } else {\r\n          this.mqttSettings = data.mqtt;\r\n\r\n          if (!connectCloudZenMqttClient(this)) {\r\n            return;\r\n          }\r\n\r\n          this.log.debug(\r\n            `[onReady] Creating ${data.deviceList.length} devices...`\r\n          );\r\n\r\n          await data.deviceList.forEach(async (device: IZenHaDeviceDetails) => {\r\n            // States erstellen\r\n            const deviceModel = createDeviceModel(\r\n              this,\r\n              device.productKey,\r\n              device.deviceKey,\r\n              device\r\n            );\r\n\r\n            if (deviceModel) {\r\n              this.zenHaDeviceList.push(deviceModel);\r\n            } else {\r\n              this.log.error(\r\n                `[onReady] Error creating device with productKey '${device.productKey}' / deviceKey '${device.deviceKey} / productModel ${device.productModel}'`\r\n              );\r\n            }\r\n          });\r\n        }\r\n        break;\r\n      case \"local\": {\r\n        this.log.debug(\"[onReady] Using local MQTT server\");\r\n\r\n        connectLocalMqttClient(this);\r\n\r\n        // Subscribe to 1. device from local settings\r\n        if (\r\n          this.config.localDevice1ProductKey &&\r\n          this.config.localDevice1DeviceKey\r\n        ) {\r\n          // States erstellen\r\n          const deviceModel = createDeviceModel(\r\n            this,\r\n            this.config.localDevice1ProductKey,\r\n            this.config.localDevice1DeviceKey\r\n          );\r\n\r\n          if (deviceModel) {\r\n            this.zenHaDeviceList.push(deviceModel);\r\n          }\r\n        }\r\n\r\n        // Subscribe to 2. device from local settings\r\n        if (\r\n          this.config.localDevice2ProductKey &&\r\n          this.config.localDevice2DeviceKey\r\n        ) {\r\n          // States erstellen\r\n          const deviceModel = createDeviceModel(\r\n            this,\r\n            this.config.localDevice2ProductKey,\r\n            this.config.localDevice2DeviceKey\r\n          );\r\n\r\n          if (deviceModel) {\r\n            this.zenHaDeviceList.push(deviceModel);\r\n          }\r\n        }\r\n\r\n        // Subscribe to 3. device from local settings\r\n        if (\r\n          this.config.localDevice3ProductKey &&\r\n          this.config.localDevice3DeviceKey\r\n        ) {\r\n          // States erstellen\r\n          const deviceModel = createDeviceModel(\r\n            this,\r\n            this.config.localDevice3ProductKey,\r\n            this.config.localDevice3DeviceKey\r\n          );\r\n\r\n          if (deviceModel) {\r\n            this.zenHaDeviceList.push(deviceModel);\r\n          }\r\n        }\r\n\r\n        // Subscribe to 4. device from local settings\r\n        if (\r\n          this.config.localDevice4ProductKey &&\r\n          this.config.localDevice4DeviceKey\r\n        ) {\r\n          // States erstellen\r\n          const deviceModel = createDeviceModel(\r\n            this,\r\n            this.config.localDevice4ProductKey,\r\n            this.config.localDevice4DeviceKey\r\n          );\r\n\r\n          if (deviceModel) {\r\n            this.zenHaDeviceList.push(deviceModel);\r\n          }\r\n        }\r\n\r\n        if (this.config.useRestart) {\r\n          // Add interval to restart adapter every 3 hours\r\n          startRefreshAccessTokenTimerJob(this);\r\n        }\r\n        break;\r\n      }\r\n      default:\r\n        this.setState(\"info.connection\", false, true);\r\n        this.log.error(\"[onReady] No connection mode found or mode invalid!\");\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n   */\r\n  private async onUnload(callback: () => void): Promise<void> {\r\n    try {\r\n      if (this.refreshAccessTokenInterval) {\r\n        this.clearInterval(this.refreshAccessTokenInterval);\r\n      }\r\n\r\n      try {\r\n        await this.mqttClient?.endAsync();\r\n        this.log.info(\"[onUnload] MQTT client stopped!\");\r\n        this.mqttClient = undefined;\r\n      } catch (ex: any) {\r\n        this.log.error(\"[onUnload] Error stopping MQTT client: !\" + ex.message);\r\n      }\r\n\r\n      this.setState(\"info.connection\", false, true);\r\n\r\n      // Scheduler beenden\r\n      if (this.resetValuesJob) {\r\n        this.resetValuesJob.cancel();\r\n        this.resetValuesJob = undefined;\r\n      }\r\n\r\n      if (this.checkStatesJob) {\r\n        this.checkStatesJob?.cancel();\r\n        this.checkStatesJob = undefined;\r\n      }\r\n\r\n      if (this.calculationJob) {\r\n        this.calculationJob.cancel();\r\n        this.calculationJob = undefined;\r\n      }\r\n\r\n      if (this.retryTimeout) {\r\n        this.clearTimeout(this.retryTimeout);\r\n      }\r\n\r\n      callback();\r\n    } catch (e) {\r\n      callback();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Is called if a subscribed state changes\r\n   */\r\n  private onStateChange(\r\n    id: string,\r\n    state: ioBroker.State | null | undefined\r\n  ): void {\r\n    if (state) {\r\n      // The state was changed\r\n\r\n      // Read product and device key from string\r\n      const splitted = id.split(\".\");\r\n      const productKey = splitted[2]; // Product Key\r\n      const deviceKey = splitted[3]; // Device Key\r\n      const stateName1 = splitted[4]; // Folder/State Name 1 (e.g. 'control')\r\n      const stateName2 = splitted[5]; // State Name, like 'setOutputLimit'\r\n\r\n      const _device = this.zenHaDeviceList.find(\r\n        (x) => x.productKey == productKey && x.deviceKey == deviceKey\r\n      );\r\n\r\n      if (!_device) {\r\n        this.log.error(\r\n          `[onStateChange] Device '${deviceKey}' not found in zenHaDeviceList!`\r\n        );\r\n        return;\r\n      }\r\n\r\n      // !!! Only stateChanges with ack==false are allowed to be processed.\r\n      if (state.val != undefined && state.val != null && !state.ack) {\r\n        switch (stateName1) {\r\n          case \"control\":\r\n            this.log.debug(\r\n              `[onStateChange] Control state '${stateName2}' changed, new value is ${state.val}, ack = ${state.ack}!`\r\n            );\r\n            switch (stateName2) {\r\n              case \"setOutputLimit\":\r\n                _device.setOutputLimit(Number(state.val));\r\n                break;\r\n              case \"setInputLimit\":\r\n                _device.setInputLimit(Number(state.val));\r\n                break;\r\n              case \"chargeLimit\":\r\n                _device.setChargeLimit(Number(state.val));\r\n                break;\r\n              case \"dischargeLimit\":\r\n                _device.setDischargeLimit(Number(state.val));\r\n                break;\r\n              case \"passMode\":\r\n                _device.setPassMode(Number(state.val));\r\n                break;\r\n              case \"dcSwitch\":\r\n                _device.setDcSwitch(state.val ? true : false);\r\n                break;\r\n              case \"acSwitch\":\r\n                _device.setAcSwitch(state.val ? true : false);\r\n                break;\r\n              case \"acMode\":\r\n                _device.setAcMode(Number(state.val));\r\n                break;\r\n              case \"hubState\":\r\n                _device.setHubState(Number(state.val));\r\n                break;\r\n              case \"autoModel\":\r\n                _device.setAutoModel(Number(state.val));\r\n                break;\r\n              case \"autoRecover\":\r\n                _device.setAutoRecover(state.val ? true : false);\r\n                break;\r\n              case \"buzzerSwitch\":\r\n                _device.setBuzzerSwitch(state.val ? true : false);\r\n                break;\r\n              case \"smartMode\":\r\n                _device.setSmartMode(state.val ? true : false);\r\n                break;\r\n              case \"setDeviceAutomationInOutLimit\":\r\n                _device.setDeviceAutomationInOutLimit(Number(state.val));\r\n                break;\r\n            }\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      } else {\r\n        // The state was deleted\r\n        //this.log.debug(`state ${id} deleted`);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nif (require.main !== module) {\r\n  // Export the constructor in compact mode\r\n  module.exports = (options: Partial<utils.AdapterOptions> | undefined) =>\r\n    new ZendureSolarflow(options);\r\n} else {\r\n  // otherwise start the instance directly\r\n  (() => new ZendureSolarflow())();\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
